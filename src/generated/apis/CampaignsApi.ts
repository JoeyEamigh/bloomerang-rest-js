/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignIdPutRequest,
  CampaignPostRequest,
  CampaignsGet200Response,
  CampaignsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    CampaignIdPutRequestFromJSON,
    CampaignIdPutRequestToJSON,
    CampaignPostRequestFromJSON,
    CampaignPostRequestToJSON,
    CampaignsGet200ResponseFromJSON,
    CampaignsGet200ResponseToJSON,
    CampaignsGet200ResponseAllOfResultsInnerFromJSON,
    CampaignsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface CampaignIdGetRequest {
    id: number;
}

export interface CampaignIdPutOperationRequest {
    id: number;
    campaignIdPutRequest: CampaignIdPutRequest;
}

export interface CampaignPostOperationRequest {
    campaignPostRequest: CampaignPostRequest;
}

export interface CampaignsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
    hasGoal?: boolean;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Gets a campaign by ID
     */
    async campaignIdGetRaw(requestParameters: CampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a campaign by ID
     */
    async campaignIdGet(requestParameters: CampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a campaign
     */
    async campaignIdPutRaw(requestParameters: CampaignIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignIdPut().'
            );
        }

        if (requestParameters['campaignIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignIdPutRequest',
                'Required parameter "campaignIdPutRequest" was null or undefined when calling campaignIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignIdPutRequestToJSON(requestParameters['campaignIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a campaign
     */
    async campaignIdPut(requestParameters: CampaignIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a campaign
     */
    async campaignPostRaw(requestParameters: CampaignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['campaignPostRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignPostRequest',
                'Required parameter "campaignPostRequest" was null or undefined when calling campaignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignPostRequestToJSON(requestParameters['campaignPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a campaign
     */
    async campaignPost(requestParameters: CampaignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of campaigns
     */
    async campaignsGetRaw(requestParameters: CampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['hasGoal'] != null) {
            queryParameters['hasGoal'] = requestParameters['hasGoal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of campaigns
     */
    async campaignsGet(requestParameters: CampaignsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200Response> {
        const response = await this.campaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refreshes campaign goals
     */
    async campaignsRefreshsummariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/refreshsummaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Refreshes campaign goals
     */
    async campaignsRefreshsummariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200Response> {
        const response = await this.campaignsRefreshsummariesGetRaw(initOverrides);
        return await response.value();
    }

}
