/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf,
  HouseholdIdPutRequest,
  HouseholdIdUpdateCommunicationSettingsPutRequest,
  HouseholdPostRequest,
  HouseholdsGet200Response,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON,
    ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfToJSON,
    HouseholdIdPutRequestFromJSON,
    HouseholdIdPutRequestToJSON,
    HouseholdIdUpdateCommunicationSettingsPutRequestFromJSON,
    HouseholdIdUpdateCommunicationSettingsPutRequestToJSON,
    HouseholdPostRequestFromJSON,
    HouseholdPostRequestToJSON,
    HouseholdsGet200ResponseFromJSON,
    HouseholdsGet200ResponseToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface HouseholdIdDeleteRequest {
    id: number;
}

export interface HouseholdIdGetRequest {
    id: number;
}

export interface HouseholdIdPutOperationRequest {
    id: number;
    householdIdPutRequest: HouseholdIdPutRequest;
}

export interface HouseholdIdUpdateCommunicationSettingsPutOperationRequest {
    id: number;
    householdIdUpdateCommunicationSettingsPutRequest: HouseholdIdUpdateCommunicationSettingsPutRequest;
}

export interface HouseholdPostOperationRequest {
    householdPostRequest: HouseholdPostRequest;
}

export interface HouseholdsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
}

/**
 * 
 */
export class HouseholdsApi extends runtime.BaseAPI {

    /**
     * Only the household will be deleted, not the members of the household.
     * Deletes a household
     */
    async householdIdDeleteRaw(requestParameters: HouseholdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Only the household will be deleted, not the members of the household.
     * Deletes a household
     */
    async householdIdDelete(requestParameters: HouseholdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.householdIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a household by ID
     */
    async householdIdGetRaw(requestParameters: HouseholdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Gets a household by ID
     */
    async householdIdGet(requestParameters: HouseholdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a household
     */
    async householdIdPutRaw(requestParameters: HouseholdIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdPut().'
            );
        }

        if (requestParameters['householdIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'householdIdPutRequest',
                'Required parameter "householdIdPutRequest" was null or undefined when calling householdIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdIdPutRequestToJSON(requestParameters['householdIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Updates a household
     */
    async householdIdPut(requestParameters: HouseholdIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the communication settings for a household and all its members
     */
    async householdIdUpdateCommunicationSettingsPutRaw(requestParameters: HouseholdIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdUpdateCommunicationSettingsPut().'
            );
        }

        if (requestParameters['householdIdUpdateCommunicationSettingsPutRequest'] == null) {
            throw new runtime.RequiredError(
                'householdIdUpdateCommunicationSettingsPutRequest',
                'Required parameter "householdIdUpdateCommunicationSettingsPutRequest" was null or undefined when calling householdIdUpdateCommunicationSettingsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}/updateCommunicationSettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdIdUpdateCommunicationSettingsPutRequestToJSON(requestParameters['householdIdUpdateCommunicationSettingsPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Updates the communication settings for a household and all its members
     */
    async householdIdUpdateCommunicationSettingsPut(requestParameters: HouseholdIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdUpdateCommunicationSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Household
     */
    async householdPostRaw(requestParameters: HouseholdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['householdPostRequest'] == null) {
            throw new runtime.RequiredError(
                'householdPostRequest',
                'Required parameter "householdPostRequest" was null or undefined when calling householdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdPostRequestToJSON(requestParameters['householdPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Creates a Household
     */
    async householdPost(requestParameters: HouseholdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of households
     */
    async householdsGetRaw(requestParameters: HouseholdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HouseholdsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/households`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HouseholdsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of households
     */
    async householdsGet(requestParameters: HouseholdsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HouseholdsGet200Response> {
        const response = await this.householdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
