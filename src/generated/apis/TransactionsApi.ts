/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipIdDelete201Response,
  TransactionIdPutRequest,
  TransactionPostRequest,
  TransactionsDesignationsGet200Response,
  TransactionsGet200Response,
  TransactionsGet200ResponseAllOfResultsInner,
  TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner,
} from '../models/index';
import {
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    TransactionIdPutRequestFromJSON,
    TransactionIdPutRequestToJSON,
    TransactionPostRequestFromJSON,
    TransactionPostRequestToJSON,
    TransactionsDesignationsGet200ResponseFromJSON,
    TransactionsDesignationsGet200ResponseToJSON,
    TransactionsGet200ResponseFromJSON,
    TransactionsGet200ResponseToJSON,
    TransactionsGet200ResponseAllOfResultsInnerFromJSON,
    TransactionsGet200ResponseAllOfResultsInnerToJSON,
    TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerFromJSON,
    TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerToJSON,
} from '../models/index';

export interface TransactionIdDeleteRequest {
    id: number;
}

export interface TransactionIdGetRequest {
    id: number;
}

export interface TransactionIdPutOperationRequest {
    id: number;
    transactionIdPutRequest: TransactionIdPutRequest;
}

export interface TransactionPostOperationRequest {
    transactionPostRequest: TransactionPostRequest;
}

export interface TransactionsDesignationIdGetRequest {
    id: number;
}

export interface TransactionsDesignationsGetRequest {
    skip?: number;
    take?: number;
    designationNumbers?: Array<number>;
    transactionIds?: Array<number>;
    id?: Array<number>;
    orderBy?: TransactionsDesignationsGetOrderByEnum;
    orderDirection?: TransactionsDesignationsGetOrderDirectionEnum;
}

export interface TransactionsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    transactionNumber?: Array<number>;
    accountId?: Array<number>;
    id?: Array<number>;
    type?: Array<TransactionsGetTypeEnum>;
    minAmount?: number;
    maxAmount?: number;
    orderBy?: TransactionsGetOrderByEnum;
    orderDirection?: TransactionsGetOrderDirectionEnum;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Deletes a transaction
     */
    async transactionIdDeleteRaw(requestParameters: TransactionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a transaction
     */
    async transactionIdDelete(requestParameters: TransactionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.transactionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a transaction by ID
     */
    async transactionIdGetRaw(requestParameters: TransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a transaction by ID
     */
    async transactionIdGet(requestParameters: TransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a transaction
     */
    async transactionIdPutRaw(requestParameters: TransactionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdPut().'
            );
        }

        if (requestParameters['transactionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'transactionIdPutRequest',
                'Required parameter "transactionIdPutRequest" was null or undefined when calling transactionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionIdPutRequestToJSON(requestParameters['transactionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a transaction
     */
    async transactionIdPut(requestParameters: TransactionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a transaction in the CRM database. Only initiates a payment charge if a WalletItem is provided. Only generates a receipt if the request comes from Bloomerang mobile.
     * Creates a transaction
     */
    async transactionPostRaw(requestParameters: TransactionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['transactionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'transactionPostRequest',
                'Required parameter "transactionPostRequest" was null or undefined when calling transactionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionPostRequestToJSON(requestParameters['transactionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a transaction in the CRM database. Only initiates a payment charge if a WalletItem is provided. Only generates a receipt if the request comes from Bloomerang mobile.
     * Creates a transaction
     */
    async transactionPost(requestParameters: TransactionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a designation by ID
     */
    async transactionsDesignationIdGetRaw(requestParameters: TransactionsDesignationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionsDesignationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions/designation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a designation by ID
     */
    async transactionsDesignationIdGet(requestParameters: TransactionsDesignationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner> {
        const response = await this.transactionsDesignationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of designations
     */
    async transactionsDesignationsGetRaw(requestParameters: TransactionsDesignationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsDesignationsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['designationNumbers'] != null) {
            queryParameters['designationNumbers'] = requestParameters['designationNumbers']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['transactionIds'] != null) {
            queryParameters['transactionIds'] = requestParameters['transactionIds']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions/designations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsDesignationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of designations
     */
    async transactionsDesignationsGet(requestParameters: TransactionsDesignationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsDesignationsGet200Response> {
        const response = await this.transactionsDesignationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of Transactions
     */
    async transactionsGetRaw(requestParameters: TransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['transactionNumber'] != null) {
            queryParameters['transactionNumber'] = requestParameters['transactionNumber']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['minAmount'] != null) {
            queryParameters['minAmount'] = requestParameters['minAmount'];
        }

        if (requestParameters['maxAmount'] != null) {
            queryParameters['maxAmount'] = requestParameters['maxAmount'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of Transactions
     */
    async transactionsGet(requestParameters: TransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200Response> {
        const response = await this.transactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum TransactionsDesignationsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsDesignationsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetTypeEnum {
    Donation = 'Donation',
    Pledge = 'Pledge',
    PledgePayment = 'PledgePayment',
    RecurringDonation = 'RecurringDonation',
    RecurringDonationPayment = 'RecurringDonationPayment'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
