/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipPost200ResponseRelationshipRole1,
  RelationshiprolesGet200Response,
} from '../models/index';
import {
    RelationshipPost200ResponseRelationshipRole1FromJSON,
    RelationshipPost200ResponseRelationshipRole1ToJSON,
    RelationshiprolesGet200ResponseFromJSON,
    RelationshiprolesGet200ResponseToJSON,
} from '../models/index';

export interface RelationshiproleIdGetRequest {
    id: number;
}

export interface RelationshiprolesGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    name?: Array<string>;
    isActive?: boolean;
}

/**
 * 
 */
export class RelationshipRolesApi extends runtime.BaseAPI {

    /**
     * Gets a relationship role by ID
     */
    async relationshiproleIdGetRaw(requestParameters: RelationshiproleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200ResponseRelationshipRole1>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshiproleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationshiprole/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseRelationshipRole1FromJSON(jsonValue));
    }

    /**
     * Gets a relationship role by ID
     */
    async relationshiproleIdGet(requestParameters: RelationshiproleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200ResponseRelationshipRole1> {
        const response = await this.relationshiproleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of relationship roles
     */
    async relationshiprolesGetRaw(requestParameters: RelationshiprolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshiprolesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationshiproles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshiprolesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of relationship roles
     */
    async relationshiprolesGet(requestParameters: RelationshiprolesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshiprolesGet200Response> {
        const response = await this.relationshiprolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
