/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FundPostRequest,
  FundsGet200Response,
  FundsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    FundPostRequestFromJSON,
    FundPostRequestToJSON,
    FundsGet200ResponseFromJSON,
    FundsGet200ResponseToJSON,
    FundsGet200ResponseAllOfResultsInnerFromJSON,
    FundsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface FundIdGetRequest {
    id: number;
}

export interface FundIdPutRequest {
    id: number;
    fundsGet200ResponseAllOfResultsInner: FundsGet200ResponseAllOfResultsInner;
}

export interface FundPostOperationRequest {
    fundPostRequest: FundPostRequest;
}

export interface FundsGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
}

/**
 * 
 */
export class FundsApi extends runtime.BaseAPI {

    /**
     * Gets a fund by ID
     */
    async fundIdGetRaw(requestParameters: FundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fundIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a fund by ID
     */
    async fundIdGet(requestParameters: FundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a fund
     */
    async fundIdPutRaw(requestParameters: FundIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fundIdPut().'
            );
        }

        if (requestParameters['fundsGet200ResponseAllOfResultsInner'] == null) {
            throw new runtime.RequiredError(
                'fundsGet200ResponseAllOfResultsInner',
                'Required parameter "fundsGet200ResponseAllOfResultsInner" was null or undefined when calling fundIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FundsGet200ResponseAllOfResultsInnerToJSON(requestParameters['fundsGet200ResponseAllOfResultsInner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a fund
     */
    async fundIdPut(requestParameters: FundIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a fund
     */
    async fundPostRaw(requestParameters: FundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['fundPostRequest'] == null) {
            throw new runtime.RequiredError(
                'fundPostRequest',
                'Required parameter "fundPostRequest" was null or undefined when calling fundPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FundPostRequestToJSON(requestParameters['fundPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a fund
     */
    async fundPost(requestParameters: FundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of funds
     */
    async fundsGetRaw(requestParameters: FundsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/funds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of funds
     */
    async fundsGet(requestParameters: FundsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200Response> {
        const response = await this.fundsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
