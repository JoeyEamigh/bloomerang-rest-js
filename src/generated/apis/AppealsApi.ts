/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppealIdPutRequest,
  AppealPostRequest,
  AppealsGet200Response,
  AppealsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    AppealIdPutRequestFromJSON,
    AppealIdPutRequestToJSON,
    AppealPostRequestFromJSON,
    AppealPostRequestToJSON,
    AppealsGet200ResponseFromJSON,
    AppealsGet200ResponseToJSON,
    AppealsGet200ResponseAllOfResultsInnerFromJSON,
    AppealsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface AppealIdGetRequest {
    id: number;
}

export interface AppealIdPutOperationRequest {
    id: number;
    appealIdPutRequest: AppealIdPutRequest;
}

export interface AppealPostOperationRequest {
    appealPostRequest: AppealPostRequest;
}

export interface AppealsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
}

/**
 * 
 */
export class AppealsApi extends runtime.BaseAPI {

    /**
     * Gets a appeal by ID
     */
    async appealIdGetRaw(requestParameters: AppealIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appealIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a appeal by ID
     */
    async appealIdGet(requestParameters: AppealIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an appeal
     */
    async appealIdPutRaw(requestParameters: AppealIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appealIdPut().'
            );
        }

        if (requestParameters['appealIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'appealIdPutRequest',
                'Required parameter "appealIdPutRequest" was null or undefined when calling appealIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppealIdPutRequestToJSON(requestParameters['appealIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates an appeal
     */
    async appealIdPut(requestParameters: AppealIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an appeal
     */
    async appealPostRaw(requestParameters: AppealPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['appealPostRequest'] == null) {
            throw new runtime.RequiredError(
                'appealPostRequest',
                'Required parameter "appealPostRequest" was null or undefined when calling appealPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppealPostRequestToJSON(requestParameters['appealPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates an appeal
     */
    async appealPost(requestParameters: AppealPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of appeals
     */
    async appealsGetRaw(requestParameters: AppealsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of appeals
     */
    async appealsGet(requestParameters: AppealsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200Response> {
        const response = await this.appealsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
