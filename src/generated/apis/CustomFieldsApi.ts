/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomFieldCategoriesTypeGet200ResponseInner,
  CustomFieldsTypeGet200ResponseInner,
  CustomValuesTypeGet200ResponseInner,
} from '../models/index';
import {
    CustomFieldCategoriesTypeGet200ResponseInnerFromJSON,
    CustomFieldCategoriesTypeGet200ResponseInnerToJSON,
    CustomFieldsTypeGet200ResponseInnerFromJSON,
    CustomFieldsTypeGet200ResponseInnerToJSON,
    CustomValuesTypeGet200ResponseInnerFromJSON,
    CustomValuesTypeGet200ResponseInnerToJSON,
} from '../models/index';

export interface CustomFieldCategoriesTypeGetRequest {
    type: CustomFieldCategoriesTypeGetTypeEnum;
}

export interface CustomFieldsTypeGetRequest {
    type: CustomFieldsTypeGetTypeEnum;
    isActive?: boolean;
    lastModified?: Date;
}

export interface CustomValuesTypeFieldIdGetRequest {
    type: CustomValuesTypeFieldIdGetTypeEnum;
    fieldId: number;
    isActive?: boolean;
    lastModified?: Date;
}

export interface CustomValuesTypeGetRequest {
    type: CustomValuesTypeGetTypeEnum;
    isActive?: boolean;
    lastModified?: Date;
}

/**
 * 
 */
export class CustomFieldsApi extends runtime.BaseAPI {

    /**
     * Gets a list of custom field categories.
     */
    async customFieldCategoriesTypeGetRaw(requestParameters: CustomFieldCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomFieldCategoriesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customFieldCategoriesTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customFieldCategories/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldCategoriesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom field categories.
     */
    async customFieldCategoriesTypeGet(requestParameters: CustomFieldCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomFieldCategoriesTypeGet200ResponseInner>> {
        const response = await this.customFieldCategoriesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom fields.
     */
    async customFieldsTypeGetRaw(requestParameters: CustomFieldsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomFieldsTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customFieldsTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customFields/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldsTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom fields.
     */
    async customFieldsTypeGet(requestParameters: CustomFieldsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomFieldsTypeGet200ResponseInner>> {
        const response = await this.customFieldsTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom values for the given field.
     */
    async customValuesTypeFieldIdGetRaw(requestParameters: CustomValuesTypeFieldIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomValuesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customValuesTypeFieldIdGet().'
            );
        }

        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling customValuesTypeFieldIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customValues/{type}/{fieldId}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomValuesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom values for the given field.
     */
    async customValuesTypeFieldIdGet(requestParameters: CustomValuesTypeFieldIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomValuesTypeGet200ResponseInner>> {
        const response = await this.customValuesTypeFieldIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom values for all pick fields of the given object type.
     */
    async customValuesTypeGetRaw(requestParameters: CustomValuesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomValuesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customValuesTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customValues/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomValuesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom values for all pick fields of the given object type.
     */
    async customValuesTypeGet(requestParameters: CustomValuesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomValuesTypeGet200ResponseInner>> {
        const response = await this.customValuesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum CustomFieldCategoriesTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomFieldsTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomValuesTypeFieldIdGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomValuesTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
