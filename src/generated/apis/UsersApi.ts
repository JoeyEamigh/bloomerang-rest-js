/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DatabaseGet200Response,
  KeysPost200Response,
  KeysPostRequest,
  UserCurrentGet200Response,
} from '../models/index';
import {
    DatabaseGet200ResponseFromJSON,
    DatabaseGet200ResponseToJSON,
    KeysPost200ResponseFromJSON,
    KeysPost200ResponseToJSON,
    KeysPostRequestFromJSON,
    KeysPostRequestToJSON,
    UserCurrentGet200ResponseFromJSON,
    UserCurrentGet200ResponseToJSON,
} from '../models/index';

export interface KeysPostOperationRequest {
    keysPostRequest: KeysPostRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Gets general organization information.
     */
    async databaseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatabaseGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/database`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets general organization information.
     */
    async databaseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatabaseGet200Response> {
        const response = await this.databaseGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the API keys for a given user.
     */
    async keysPostRaw(requestParameters: KeysPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeysPost200Response>> {
        if (requestParameters['keysPostRequest'] == null) {
            throw new runtime.RequiredError(
                'keysPostRequest',
                'Required parameter "keysPostRequest" was null or undefined when calling keysPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeysPostRequestToJSON(requestParameters['keysPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeysPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the API keys for a given user.
     */
    async keysPost(requestParameters: KeysPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeysPost200Response> {
        const response = await this.keysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the user corresponding to the private API key used.
     */
    async userCurrentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrentGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCurrentGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets the user corresponding to the private API key used.
     */
    async userCurrentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrentGet200Response> {
        const response = await this.userCurrentGetRaw(initOverrides);
        return await response.value();
    }

}
