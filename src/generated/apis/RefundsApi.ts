/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RefundIdPutRequest,
  RefundPostRequest,
  RefundsGet200Response,
  RefundsGet200ResponseAllOfResultsInner,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    RefundIdPutRequestFromJSON,
    RefundIdPutRequestToJSON,
    RefundPostRequestFromJSON,
    RefundPostRequestToJSON,
    RefundsGet200ResponseFromJSON,
    RefundsGet200ResponseToJSON,
    RefundsGet200ResponseAllOfResultsInnerFromJSON,
    RefundsGet200ResponseAllOfResultsInnerToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface RefundIdDeleteRequest {
    id: number;
}

export interface RefundIdGetRequest {
    id: number;
}

export interface RefundIdPutOperationRequest {
    id: number;
    refundIdPutRequest: RefundIdPutRequest;
}

export interface RefundPostOperationRequest {
    refundPostRequest: RefundPostRequest;
}

export interface RefundsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    transactionId?: Array<number>;
    id?: Array<number>;
    orderBy?: RefundsGetOrderByEnum;
    orderDirection?: RefundsGetOrderDirectionEnum;
}

/**
 * 
 */
export class RefundsApi extends runtime.BaseAPI {

    /**
     * Deletes a refund
     */
    async refundIdDeleteRaw(requestParameters: RefundIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a refund
     */
    async refundIdDelete(requestParameters: RefundIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.refundIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a refund by ID
     */
    async refundIdGetRaw(requestParameters: RefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a refund by ID
     */
    async refundIdGet(requestParameters: RefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a refund
     */
    async refundIdPutRaw(requestParameters: RefundIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdPut().'
            );
        }

        if (requestParameters['refundIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'refundIdPutRequest',
                'Required parameter "refundIdPutRequest" was null or undefined when calling refundIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RefundIdPutRequestToJSON(requestParameters['refundIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a refund
     */
    async refundIdPut(requestParameters: RefundIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a refund
     */
    async refundPostRaw(requestParameters: RefundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['refundPostRequest'] == null) {
            throw new runtime.RequiredError(
                'refundPostRequest',
                'Required parameter "refundPostRequest" was null or undefined when calling refundPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundPostRequestToJSON(requestParameters['refundPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a refund
     */
    async refundPost(requestParameters: RefundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of refunds.
     */
    async refundsGetRaw(requestParameters: RefundsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['transactionId'] != null) {
            queryParameters['transactionId'] = requestParameters['transactionId']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refunds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of refunds.
     */
    async refundsGet(requestParameters: RefundsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200Response> {
        const response = await this.refundsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum RefundsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum RefundsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
