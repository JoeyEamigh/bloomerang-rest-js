/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipIdDelete201Response,
  SoftcreditPostRequest,
  SoftcreditsGet200Response,
  SoftcreditsGet200ResponseAllOfResultsInner,
  TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf,
} from '../models/index';
import {
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    SoftcreditPostRequestFromJSON,
    SoftcreditPostRequestToJSON,
    SoftcreditsGet200ResponseFromJSON,
    SoftcreditsGet200ResponseToJSON,
    SoftcreditsGet200ResponseAllOfResultsInnerFromJSON,
    SoftcreditsGet200ResponseAllOfResultsInnerToJSON,
    TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfFromJSON,
    TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfToJSON,
} from '../models/index';

export interface SoftcreditIdDeleteRequest {
    id: number;
}

export interface SoftcreditIdGetRequest {
    id: number;
}

export interface SoftcreditIdPutRequest {
    id: number;
    transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf: TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf;
}

export interface SoftcreditPostOperationRequest {
    softcreditPostRequest: SoftcreditPostRequest;
}

export interface SoftcreditsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: SoftcreditsGetOrderByEnum;
    orderDirection?: SoftcreditsGetOrderDirectionEnum;
}

/**
 * 
 */
export class SoftCreditsApi extends runtime.BaseAPI {

    /**
     * Deletes a soft credit
     */
    async softcreditIdDeleteRaw(requestParameters: SoftcreditIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a soft credit
     */
    async softcreditIdDelete(requestParameters: SoftcreditIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.softcreditIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a soft credit by ID
     */
    async softcreditIdGetRaw(requestParameters: SoftcreditIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a soft credit by ID
     */
    async softcreditIdGet(requestParameters: SoftcreditIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a soft credit
     */
    async softcreditIdPutRaw(requestParameters: SoftcreditIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdPut().'
            );
        }

        if (requestParameters['transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf'] == null) {
            throw new runtime.RequiredError(
                'transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf',
                'Required parameter "transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf" was null or undefined when calling softcreditIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfToJSON(requestParameters['transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a soft credit
     */
    async softcreditIdPut(requestParameters: SoftcreditIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a soft credit
     */
    async softcreditPostRaw(requestParameters: SoftcreditPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['softcreditPostRequest'] == null) {
            throw new runtime.RequiredError(
                'softcreditPostRequest',
                'Required parameter "softcreditPostRequest" was null or undefined when calling softcreditPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["StandardEditFinancialData"]);
        }

        const response = await this.request({
            path: `/softcredit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SoftcreditPostRequestToJSON(requestParameters['softcreditPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a soft credit
     */
    async softcreditPost(requestParameters: SoftcreditPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of soft credits.
     */
    async softcreditsGetRaw(requestParameters: SoftcreditsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of soft credits.
     */
    async softcreditsGet(requestParameters: SoftcreditsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200Response> {
        const response = await this.softcreditsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum SoftcreditsGetOrderByEnum {
    AccountId = 'AccountId',
    CreatedDate = 'CreatedDate',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum SoftcreditsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
