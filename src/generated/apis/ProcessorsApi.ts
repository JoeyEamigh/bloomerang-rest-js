/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProcessorsGet200Response,
  ProcessorsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    ProcessorsGet200ResponseFromJSON,
    ProcessorsGet200ResponseToJSON,
    ProcessorsGet200ResponseAllOfResultsInnerFromJSON,
    ProcessorsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface ProcessorIdGetRequest {
    id: number;
}

export interface ProcessorsGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
}

/**
 * 
 */
export class ProcessorsApi extends runtime.BaseAPI {

    /**
     * Gets a processor by ID
     */
    async processorIdGetRaw(requestParameters: ProcessorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling processorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/processor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a processor by ID
     */
    async processorIdGet(requestParameters: ProcessorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorsGet200ResponseAllOfResultsInner> {
        const response = await this.processorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of processors
     */
    async processorsGetRaw(requestParameters: ProcessorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/processors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of processors
     */
    async processorsGet(requestParameters: ProcessorsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorsGet200Response> {
        const response = await this.processorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
