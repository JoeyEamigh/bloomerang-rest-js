/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InteractionIdPutRequest,
  InteractionPostRequest,
  InteractionsGet200Response,
  InteractionsGet200ResponseAllOfResultsInner,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    InteractionIdPutRequestFromJSON,
    InteractionIdPutRequestToJSON,
    InteractionPostRequestFromJSON,
    InteractionPostRequestToJSON,
    InteractionsGet200ResponseFromJSON,
    InteractionsGet200ResponseToJSON,
    InteractionsGet200ResponseAllOfResultsInnerFromJSON,
    InteractionsGet200ResponseAllOfResultsInnerToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface InteractionIdDeleteRequest {
    id: number;
}

export interface InteractionIdGetRequest {
    id: number;
}

export interface InteractionIdPutOperationRequest {
    id: number;
    interactionIdPutRequest: InteractionIdPutRequest;
}

export interface InteractionPostOperationRequest {
    interactionPostRequest: InteractionPostRequest;
}

export interface InteractionsGetRequest {
    skip?: number;
    take?: number;
    channel?: Array<InteractionsGetChannelEnum>;
    purpose?: Array<InteractionsGetPurposeEnum>;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: InteractionsGetOrderByEnum;
    orderDirection?: InteractionsGetOrderDirectionEnum;
}

/**
 * 
 */
export class InteractionsApi extends runtime.BaseAPI {

    /**
     * Deletes an interaction
     */
    async interactionIdDeleteRaw(requestParameters: InteractionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an interaction
     */
    async interactionIdDelete(requestParameters: InteractionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.interactionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an interaction by ID
     */
    async interactionIdGetRaw(requestParameters: InteractionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets an interaction by ID
     */
    async interactionIdGet(requestParameters: InteractionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an interaction
     */
    async interactionIdPutRaw(requestParameters: InteractionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdPut().'
            );
        }

        if (requestParameters['interactionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'interactionIdPutRequest',
                'Required parameter "interactionIdPutRequest" was null or undefined when calling interactionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InteractionIdPutRequestToJSON(requestParameters['interactionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates an interaction
     */
    async interactionIdPut(requestParameters: InteractionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an interaction
     */
    async interactionPostRaw(requestParameters: InteractionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['interactionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'interactionPostRequest',
                'Required parameter "interactionPostRequest" was null or undefined when calling interactionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InteractionPostRequestToJSON(requestParameters['interactionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates an interaction
     */
    async interactionPost(requestParameters: InteractionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of interactions.
     */
    async interactionsGetRaw(requestParameters: InteractionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['purpose'] != null) {
            queryParameters['purpose'] = requestParameters['purpose']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of interactions.
     */
    async interactionsGet(requestParameters: InteractionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200Response> {
        const response = await this.interactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
