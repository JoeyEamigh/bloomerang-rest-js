/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipIdDelete201Response,
  RelationshipIdPutRequest,
  RelationshipPost200Response,
  RelationshipPostRequest,
} from '../models/index';
import {
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    RelationshipIdPutRequestFromJSON,
    RelationshipIdPutRequestToJSON,
    RelationshipPost200ResponseFromJSON,
    RelationshipPost200ResponseToJSON,
    RelationshipPostRequestFromJSON,
    RelationshipPostRequestToJSON,
} from '../models/index';

export interface RelationshipIdDeleteRequest {
    id: number;
}

export interface RelationshipIdGetRequest {
    id: number;
}

export interface RelationshipIdPutOperationRequest {
    id: number;
    relationshipIdPutRequest: RelationshipIdPutRequest;
}

export interface RelationshipPostOperationRequest {
    relationshipPostRequest: RelationshipPostRequest;
}

/**
 * 
 */
export class RelationshipsApi extends runtime.BaseAPI {

    /**
     * Deletes a Relationship
     */
    async relationshipIdDeleteRaw(requestParameters: RelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a Relationship
     */
    async relationshipIdDelete(requestParameters: RelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.relationshipIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a relationship
     */
    async relationshipIdGetRaw(requestParameters: RelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a relationship
     */
    async relationshipIdGet(requestParameters: RelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a relationship
     */
    async relationshipIdPutRaw(requestParameters: RelationshipIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdPut().'
            );
        }

        if (requestParameters['relationshipIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'relationshipIdPutRequest',
                'Required parameter "relationshipIdPutRequest" was null or undefined when calling relationshipIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipIdPutRequestToJSON(requestParameters['relationshipIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a relationship
     */
    async relationshipIdPut(requestParameters: RelationshipIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Relationship between two non-household Constituents
     */
    async relationshipPostRaw(requestParameters: RelationshipPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['relationshipPostRequest'] == null) {
            throw new runtime.RequiredError(
                'relationshipPostRequest',
                'Required parameter "relationshipPostRequest" was null or undefined when calling relationshipPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipPostRequestToJSON(requestParameters['relationshipPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a Relationship between two non-household Constituents
     */
    async relationshipPost(requestParameters: RelationshipPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
