/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressPostRequest,
  AddressesGet200Response,
  ConstituentPostRequestAllOfAllOfPrimaryAddress,
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    AddressPostRequestFromJSON,
    AddressPostRequestToJSON,
    AddressesGet200ResponseFromJSON,
    AddressesGet200ResponseToJSON,
    ConstituentPostRequestAllOfAllOfPrimaryAddressFromJSON,
    ConstituentPostRequestAllOfAllOfPrimaryAddressToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface AddressIdDeleteRequest {
    id: number;
}

export interface AddressIdGetRequest {
    id: number;
}

export interface AddressIdPutRequest {
    id: number;
    constituentPostRequestAllOfAllOfPrimaryAddress: ConstituentPostRequestAllOfAllOfPrimaryAddress;
}

export interface AddressPostOperationRequest {
    addressPostRequest: AddressPostRequest;
}

export interface AddressesGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     * Deletes an address
     */
    async addressIdDeleteRaw(requestParameters: AddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an address
     */
    async addressIdDelete(requestParameters: AddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.addressIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an address by ID
     */
    async addressIdGetRaw(requestParameters: AddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Gets an address by ID
     */
    async addressIdGet(requestParameters: AddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an address
     */
    async addressIdPutRaw(requestParameters: AddressIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdPut().'
            );
        }

        if (requestParameters['constituentPostRequestAllOfAllOfPrimaryAddress'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequestAllOfAllOfPrimaryAddress',
                'Required parameter "constituentPostRequestAllOfAllOfPrimaryAddress" was null or undefined when calling addressIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestAllOfAllOfPrimaryAddressToJSON(requestParameters['constituentPostRequestAllOfAllOfPrimaryAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Updates an address
     */
    async addressIdPut(requestParameters: AddressIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address
     */
    async addressPostRaw(requestParameters: AddressPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['addressPostRequest'] == null) {
            throw new runtime.RequiredError(
                'addressPostRequest',
                'Required parameter "addressPostRequest" was null or undefined when calling addressPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressPostRequestToJSON(requestParameters['addressPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Creates an address
     */
    async addressPost(requestParameters: AddressPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of addresses.
     */
    async addressesGetRaw(requestParameters: AddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of addresses.
     */
    async addressesGet(requestParameters: AddressesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesGet200Response> {
        const response = await this.addressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
