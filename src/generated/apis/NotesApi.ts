/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NoteIdPutRequest,
  NotePostRequest,
  NotesGet200Response,
  NotesGet200ResponseAllOfResultsInner,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    NoteIdPutRequestFromJSON,
    NoteIdPutRequestToJSON,
    NotePostRequestFromJSON,
    NotePostRequestToJSON,
    NotesGet200ResponseFromJSON,
    NotesGet200ResponseToJSON,
    NotesGet200ResponseAllOfResultsInnerFromJSON,
    NotesGet200ResponseAllOfResultsInnerToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface NoteIdDeleteRequest {
    id: number;
}

export interface NoteIdGetRequest {
    id: number;
}

export interface NoteIdPutOperationRequest {
    id: number;
    noteIdPutRequest: NoteIdPutRequest;
}

export interface NotePostOperationRequest {
    notePostRequest: NotePostRequest;
}

export interface NotesGetRequest {
    skip?: number;
    take?: number;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: NotesGetOrderByEnum;
    orderDirection?: NotesGetOrderDirectionEnum;
}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI {

    /**
     * Deletes a note
     */
    async noteIdDeleteRaw(requestParameters: NoteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a note
     */
    async noteIdDelete(requestParameters: NoteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.noteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a note by ID
     */
    async noteIdGetRaw(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a note by ID
     */
    async noteIdGet(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.noteIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a note
     */
    async noteIdPutRaw(requestParameters: NoteIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdPut().'
            );
        }

        if (requestParameters['noteIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'noteIdPutRequest',
                'Required parameter "noteIdPutRequest" was null or undefined when calling noteIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteIdPutRequestToJSON(requestParameters['noteIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a note
     */
    async noteIdPut(requestParameters: NoteIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.noteIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a note
     */
    async notePostRaw(requestParameters: NotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['notePostRequest'] == null) {
            throw new runtime.RequiredError(
                'notePostRequest',
                'Required parameter "notePostRequest" was null or undefined when calling notePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotePostRequestToJSON(requestParameters['notePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a note
     */
    async notePost(requestParameters: NotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.notePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of notes.
     */
    async notesGetRaw(requestParameters: NotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of notes.
     */
    async notesGet(requestParameters: NotesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200Response> {
        const response = await this.notesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum NotesGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum NotesGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
