/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressPostRequest,
  AddressesGet200Response,
  AppealIdPutRequest,
  AppealPostRequest,
  AppealsGet200Response,
  AppealsGet200ResponseAllOfResultsInner,
  CampaignIdPutRequest,
  CampaignPostRequest,
  CampaignsGet200Response,
  CampaignsGet200ResponseAllOfResultsInner,
  ConstituentDuplicatesGet200Response,
  ConstituentDuplicatesPostRequest,
  ConstituentIdPutRequest,
  ConstituentIdRelationshipsGet200Response,
  ConstituentIdTimelineGet200Response,
  ConstituentIdUpdateCommunicationSettingsPutRequest,
  ConstituentMergePostRequest,
  ConstituentPost200Response,
  ConstituentPostRequest,
  ConstituentPostRequestAllOfAllOfPrimaryAddress,
  ConstituentPostRequestAllOfAllOfSecondaryEmailsInner,
  ConstituentsGet200Response,
  ConstituentsGet200ResponseAllOfResultsInner,
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress,
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail,
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone,
  ConstituentsSearchGet200Response,
  ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf,
  CustomFieldCategoriesTypeGet200ResponseInner,
  CustomFieldsTypeGet200ResponseInner,
  CustomValuesTypeGet200ResponseInner,
  DatabaseGet200Response,
  EmailInterestsGet200Response,
  EmailInterestsGet200ResponseAllOfResultsInner,
  EmailPostRequest,
  EmailsGet200Response,
  FundPostRequest,
  FundsGet200Response,
  FundsGet200ResponseAllOfResultsInner,
  HouseholdIdPutRequest,
  HouseholdIdUpdateCommunicationSettingsPutRequest,
  HouseholdPostRequest,
  HouseholdsGet200Response,
  InteractionIdPutRequest,
  InteractionPostRequest,
  InteractionsGet200Response,
  InteractionsGet200ResponseAllOfResultsInner,
  KeysPost200Response,
  KeysPostRequest,
  NoteIdPutRequest,
  NotePostRequest,
  NotesGet200Response,
  NotesGet200ResponseAllOfResultsInner,
  PhonePostRequest,
  PhonesGet200Response,
  PledgeGenerateInstallmentsGet200ResponseInner,
  PledgeIdInstallmentsGet200Response,
  PledgeIdPaymentFailuresGet200Response,
  PledgeIdPaymentsGet200Response,
  PledgeIdWriteOffPost200Response,
  ProcessorsGet200Response,
  ProcessorsGet200ResponseAllOfResultsInner,
  RefundIdPutRequest,
  RefundPostRequest,
  RefundsGet200Response,
  RefundsGet200ResponseAllOfResultsInner,
  RelationshipIdDelete201Response,
  RelationshipIdPutRequest,
  RelationshipPost200Response,
  RelationshipPost200ResponseRelationshipRole1,
  RelationshipPostRequest,
  RelationshiprolesGet200Response,
  SoftcreditPostRequest,
  SoftcreditsGet200Response,
  SoftcreditsGet200ResponseAllOfResultsInner,
  TaskIdPutRequest,
  TaskPostRequest,
  TasksGet200Response,
  TasksGet200ResponseAllOfResultsInner,
  TransactionIdPutRequest,
  TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf,
  TransactionPostRequest,
  TransactionsDesignationsGet200Response,
  TransactionsGet200Response,
  TransactionsGet200ResponseAllOfResultsInner,
  TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner,
  TributeIdPutRequest,
  TributePostRequest,
  TributesGet200Response,
  TributesGet200ResponseAllOfResultsInner,
  UserCurrentGet200Response,
  WalletitemPostRequest,
  WalletitemsGet200Response,
  WalletitemsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    AddressPostRequestFromJSON,
    AddressPostRequestToJSON,
    AddressesGet200ResponseFromJSON,
    AddressesGet200ResponseToJSON,
    AppealIdPutRequestFromJSON,
    AppealIdPutRequestToJSON,
    AppealPostRequestFromJSON,
    AppealPostRequestToJSON,
    AppealsGet200ResponseFromJSON,
    AppealsGet200ResponseToJSON,
    AppealsGet200ResponseAllOfResultsInnerFromJSON,
    AppealsGet200ResponseAllOfResultsInnerToJSON,
    CampaignIdPutRequestFromJSON,
    CampaignIdPutRequestToJSON,
    CampaignPostRequestFromJSON,
    CampaignPostRequestToJSON,
    CampaignsGet200ResponseFromJSON,
    CampaignsGet200ResponseToJSON,
    CampaignsGet200ResponseAllOfResultsInnerFromJSON,
    CampaignsGet200ResponseAllOfResultsInnerToJSON,
    ConstituentDuplicatesGet200ResponseFromJSON,
    ConstituentDuplicatesGet200ResponseToJSON,
    ConstituentDuplicatesPostRequestFromJSON,
    ConstituentDuplicatesPostRequestToJSON,
    ConstituentIdPutRequestFromJSON,
    ConstituentIdPutRequestToJSON,
    ConstituentIdRelationshipsGet200ResponseFromJSON,
    ConstituentIdRelationshipsGet200ResponseToJSON,
    ConstituentIdTimelineGet200ResponseFromJSON,
    ConstituentIdTimelineGet200ResponseToJSON,
    ConstituentIdUpdateCommunicationSettingsPutRequestFromJSON,
    ConstituentIdUpdateCommunicationSettingsPutRequestToJSON,
    ConstituentMergePostRequestFromJSON,
    ConstituentMergePostRequestToJSON,
    ConstituentPost200ResponseFromJSON,
    ConstituentPost200ResponseToJSON,
    ConstituentPostRequestFromJSON,
    ConstituentPostRequestToJSON,
    ConstituentPostRequestAllOfAllOfPrimaryAddressFromJSON,
    ConstituentPostRequestAllOfAllOfPrimaryAddressToJSON,
    ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerFromJSON,
    ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerToJSON,
    ConstituentsGet200ResponseFromJSON,
    ConstituentsGet200ResponseToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneToJSON,
    ConstituentsSearchGet200ResponseFromJSON,
    ConstituentsSearchGet200ResponseToJSON,
    ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON,
    ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfToJSON,
    CustomFieldCategoriesTypeGet200ResponseInnerFromJSON,
    CustomFieldCategoriesTypeGet200ResponseInnerToJSON,
    CustomFieldsTypeGet200ResponseInnerFromJSON,
    CustomFieldsTypeGet200ResponseInnerToJSON,
    CustomValuesTypeGet200ResponseInnerFromJSON,
    CustomValuesTypeGet200ResponseInnerToJSON,
    DatabaseGet200ResponseFromJSON,
    DatabaseGet200ResponseToJSON,
    EmailInterestsGet200ResponseFromJSON,
    EmailInterestsGet200ResponseToJSON,
    EmailInterestsGet200ResponseAllOfResultsInnerFromJSON,
    EmailInterestsGet200ResponseAllOfResultsInnerToJSON,
    EmailPostRequestFromJSON,
    EmailPostRequestToJSON,
    EmailsGet200ResponseFromJSON,
    EmailsGet200ResponseToJSON,
    FundPostRequestFromJSON,
    FundPostRequestToJSON,
    FundsGet200ResponseFromJSON,
    FundsGet200ResponseToJSON,
    FundsGet200ResponseAllOfResultsInnerFromJSON,
    FundsGet200ResponseAllOfResultsInnerToJSON,
    HouseholdIdPutRequestFromJSON,
    HouseholdIdPutRequestToJSON,
    HouseholdIdUpdateCommunicationSettingsPutRequestFromJSON,
    HouseholdIdUpdateCommunicationSettingsPutRequestToJSON,
    HouseholdPostRequestFromJSON,
    HouseholdPostRequestToJSON,
    HouseholdsGet200ResponseFromJSON,
    HouseholdsGet200ResponseToJSON,
    InteractionIdPutRequestFromJSON,
    InteractionIdPutRequestToJSON,
    InteractionPostRequestFromJSON,
    InteractionPostRequestToJSON,
    InteractionsGet200ResponseFromJSON,
    InteractionsGet200ResponseToJSON,
    InteractionsGet200ResponseAllOfResultsInnerFromJSON,
    InteractionsGet200ResponseAllOfResultsInnerToJSON,
    KeysPost200ResponseFromJSON,
    KeysPost200ResponseToJSON,
    KeysPostRequestFromJSON,
    KeysPostRequestToJSON,
    NoteIdPutRequestFromJSON,
    NoteIdPutRequestToJSON,
    NotePostRequestFromJSON,
    NotePostRequestToJSON,
    NotesGet200ResponseFromJSON,
    NotesGet200ResponseToJSON,
    NotesGet200ResponseAllOfResultsInnerFromJSON,
    NotesGet200ResponseAllOfResultsInnerToJSON,
    PhonePostRequestFromJSON,
    PhonePostRequestToJSON,
    PhonesGet200ResponseFromJSON,
    PhonesGet200ResponseToJSON,
    PledgeGenerateInstallmentsGet200ResponseInnerFromJSON,
    PledgeGenerateInstallmentsGet200ResponseInnerToJSON,
    PledgeIdInstallmentsGet200ResponseFromJSON,
    PledgeIdInstallmentsGet200ResponseToJSON,
    PledgeIdPaymentFailuresGet200ResponseFromJSON,
    PledgeIdPaymentFailuresGet200ResponseToJSON,
    PledgeIdPaymentsGet200ResponseFromJSON,
    PledgeIdPaymentsGet200ResponseToJSON,
    PledgeIdWriteOffPost200ResponseFromJSON,
    PledgeIdWriteOffPost200ResponseToJSON,
    ProcessorsGet200ResponseFromJSON,
    ProcessorsGet200ResponseToJSON,
    ProcessorsGet200ResponseAllOfResultsInnerFromJSON,
    ProcessorsGet200ResponseAllOfResultsInnerToJSON,
    RefundIdPutRequestFromJSON,
    RefundIdPutRequestToJSON,
    RefundPostRequestFromJSON,
    RefundPostRequestToJSON,
    RefundsGet200ResponseFromJSON,
    RefundsGet200ResponseToJSON,
    RefundsGet200ResponseAllOfResultsInnerFromJSON,
    RefundsGet200ResponseAllOfResultsInnerToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    RelationshipIdPutRequestFromJSON,
    RelationshipIdPutRequestToJSON,
    RelationshipPost200ResponseFromJSON,
    RelationshipPost200ResponseToJSON,
    RelationshipPost200ResponseRelationshipRole1FromJSON,
    RelationshipPost200ResponseRelationshipRole1ToJSON,
    RelationshipPostRequestFromJSON,
    RelationshipPostRequestToJSON,
    RelationshiprolesGet200ResponseFromJSON,
    RelationshiprolesGet200ResponseToJSON,
    SoftcreditPostRequestFromJSON,
    SoftcreditPostRequestToJSON,
    SoftcreditsGet200ResponseFromJSON,
    SoftcreditsGet200ResponseToJSON,
    SoftcreditsGet200ResponseAllOfResultsInnerFromJSON,
    SoftcreditsGet200ResponseAllOfResultsInnerToJSON,
    TaskIdPutRequestFromJSON,
    TaskIdPutRequestToJSON,
    TaskPostRequestFromJSON,
    TaskPostRequestToJSON,
    TasksGet200ResponseFromJSON,
    TasksGet200ResponseToJSON,
    TasksGet200ResponseAllOfResultsInnerFromJSON,
    TasksGet200ResponseAllOfResultsInnerToJSON,
    TransactionIdPutRequestFromJSON,
    TransactionIdPutRequestToJSON,
    TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfFromJSON,
    TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfToJSON,
    TransactionPostRequestFromJSON,
    TransactionPostRequestToJSON,
    TransactionsDesignationsGet200ResponseFromJSON,
    TransactionsDesignationsGet200ResponseToJSON,
    TransactionsGet200ResponseFromJSON,
    TransactionsGet200ResponseToJSON,
    TransactionsGet200ResponseAllOfResultsInnerFromJSON,
    TransactionsGet200ResponseAllOfResultsInnerToJSON,
    TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerFromJSON,
    TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerToJSON,
    TributeIdPutRequestFromJSON,
    TributeIdPutRequestToJSON,
    TributePostRequestFromJSON,
    TributePostRequestToJSON,
    TributesGet200ResponseFromJSON,
    TributesGet200ResponseToJSON,
    TributesGet200ResponseAllOfResultsInnerFromJSON,
    TributesGet200ResponseAllOfResultsInnerToJSON,
    UserCurrentGet200ResponseFromJSON,
    UserCurrentGet200ResponseToJSON,
    WalletitemPostRequestFromJSON,
    WalletitemPostRequestToJSON,
    WalletitemsGet200ResponseFromJSON,
    WalletitemsGet200ResponseToJSON,
    WalletitemsGet200ResponseAllOfResultsInnerFromJSON,
    WalletitemsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface AddressIdDeleteRequest {
    id: number;
}

export interface AddressIdGetRequest {
    id: number;
}

export interface AddressIdPutRequest {
    id: number;
    constituentPostRequestAllOfAllOfPrimaryAddress: ConstituentPostRequestAllOfAllOfPrimaryAddress;
}

export interface AddressPostOperationRequest {
    addressPostRequest: AddressPostRequest;
}

export interface AddressesGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
}

export interface AppealIdGetRequest {
    id: number;
}

export interface AppealIdPutOperationRequest {
    id: number;
    appealIdPutRequest: AppealIdPutRequest;
}

export interface AppealPostOperationRequest {
    appealPostRequest: AppealPostRequest;
}

export interface AppealsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
}

export interface CampaignIdGetRequest {
    id: number;
}

export interface CampaignIdPutOperationRequest {
    id: number;
    campaignIdPutRequest: CampaignIdPutRequest;
}

export interface CampaignPostOperationRequest {
    campaignPostRequest: CampaignPostRequest;
}

export interface CampaignsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
    hasGoal?: boolean;
}

export interface ConstituentDuplicatesGetRequest {
    firstName?: string;
    lastName?: string;
    organizationName?: string;
    street?: string;
    phoneNumber?: string;
    emailAddress?: string;
    type?: string;
}

export interface ConstituentDuplicatesPostOperationRequest {
    constituentDuplicatesPostRequest: ConstituentDuplicatesPostRequest;
}

export interface ConstituentIdDeleteRequest {
    id: number;
}

export interface ConstituentIdGetRequest {
    id: number;
}

export interface ConstituentIdPutOperationRequest {
    id: number;
    constituentIdPutRequest: ConstituentIdPutRequest;
}

export interface ConstituentIdRelationshipsGetRequest {
    id: number;
    skip?: number;
    take?: number;
    lastModified?: Date;
}

export interface ConstituentIdTimelineGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface ConstituentIdUpdateCommunicationSettingsPutOperationRequest {
    id: number;
    constituentIdUpdateCommunicationSettingsPutRequest: ConstituentIdUpdateCommunicationSettingsPutRequest;
}

export interface ConstituentMergePostOperationRequest {
    constituentMergePostRequest: ConstituentMergePostRequest;
}

export interface ConstituentPostOperationRequest {
    constituentPostRequest: ConstituentPostRequest;
}

export interface ConstituentsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    isFavorite?: boolean;
    type?: ConstituentsGetTypeEnum;
    id?: Array<number>;
    orderBy?: ConstituentsGetOrderByEnum;
    orderDirection?: ConstituentsGetOrderDirectionEnum;
    customFieldId?: number;
    customFieldValue?: string;
}

export interface ConstituentsSearchGetRequest {
    skip?: number;
    take?: number;
    search?: string;
    type?: ConstituentsSearchGetTypeEnum;
}

export interface CustomFieldCategoriesTypeGetRequest {
    type: CustomFieldCategoriesTypeGetTypeEnum;
}

export interface CustomFieldsTypeGetRequest {
    type: CustomFieldsTypeGetTypeEnum;
    isActive?: boolean;
    lastModified?: Date;
}

export interface CustomValuesTypeFieldIdGetRequest {
    type: CustomValuesTypeFieldIdGetTypeEnum;
    fieldId: number;
    isActive?: boolean;
    lastModified?: Date;
}

export interface CustomValuesTypeGetRequest {
    type: CustomValuesTypeGetTypeEnum;
    isActive?: boolean;
    lastModified?: Date;
}

export interface EmailIdDeleteRequest {
    id: number;
}

export interface EmailIdGetRequest {
    id: number;
}

export interface EmailIdPutRequest {
    id: number;
    constituentPostRequestAllOfAllOfSecondaryEmailsInner: ConstituentPostRequestAllOfAllOfSecondaryEmailsInner;
}

export interface EmailInterestIdGetRequest {
    id: number;
}

export interface EmailInterestsGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
}

export interface EmailPostOperationRequest {
    emailPostRequest: EmailPostRequest;
}

export interface EmailsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
}

export interface FundIdGetRequest {
    id: number;
}

export interface FundIdPutRequest {
    id: number;
    fundsGet200ResponseAllOfResultsInner: FundsGet200ResponseAllOfResultsInner;
}

export interface FundPostOperationRequest {
    fundPostRequest: FundPostRequest;
}

export interface FundsGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
    search?: string;
}

export interface HouseholdIdDeleteRequest {
    id: number;
}

export interface HouseholdIdGetRequest {
    id: number;
}

export interface HouseholdIdPutOperationRequest {
    id: number;
    householdIdPutRequest: HouseholdIdPutRequest;
}

export interface HouseholdIdUpdateCommunicationSettingsPutOperationRequest {
    id: number;
    householdIdUpdateCommunicationSettingsPutRequest: HouseholdIdUpdateCommunicationSettingsPutRequest;
}

export interface HouseholdPostOperationRequest {
    householdPostRequest: HouseholdPostRequest;
}

export interface HouseholdsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
}

export interface InteractionIdDeleteRequest {
    id: number;
}

export interface InteractionIdGetRequest {
    id: number;
}

export interface InteractionIdPutOperationRequest {
    id: number;
    interactionIdPutRequest: InteractionIdPutRequest;
}

export interface InteractionPostOperationRequest {
    interactionPostRequest: InteractionPostRequest;
}

export interface InteractionsGetRequest {
    skip?: number;
    take?: number;
    channel?: Array<InteractionsGetChannelEnum>;
    purpose?: Array<InteractionsGetPurposeEnum>;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: InteractionsGetOrderByEnum;
    orderDirection?: InteractionsGetOrderDirectionEnum;
}

export interface KeysPostOperationRequest {
    keysPostRequest: KeysPostRequest;
}

export interface NoteIdDeleteRequest {
    id: number;
}

export interface NoteIdGetRequest {
    id: number;
}

export interface NoteIdPutOperationRequest {
    id: number;
    noteIdPutRequest: NoteIdPutRequest;
}

export interface NotePostOperationRequest {
    notePostRequest: NotePostRequest;
}

export interface NotesGetRequest {
    skip?: number;
    take?: number;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: NotesGetOrderByEnum;
    orderDirection?: NotesGetOrderDirectionEnum;
}

export interface PhoneIdDeleteRequest {
    id: number;
}

export interface PhoneIdGetRequest {
    id: number;
}

export interface PhoneIdPutRequest {
    id: number;
    constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone: ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone;
}

export interface PhonePostOperationRequest {
    phonePostRequest: PhonePostRequest;
}

export interface PhonesGetRequest {
    skip?: number;
    take?: number;
    constituent?: Array<number>;
    id?: Array<number>;
}

export interface PledgeGenerateInstallmentsGetRequest {
    pledgeAmount: number;
    installmentAmount: number;
    firstInstallmentDate: Date;
    frequency: PledgeGenerateInstallmentsGetFrequencyEnum;
    day1?: number;
    day2?: number;
}

export interface PledgeIdInstallmentsGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdPaymentFailuresGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdPaymentsGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdWriteOffPostRequest {
    id: number;
}

export interface ProcessorIdGetRequest {
    id: number;
}

export interface ProcessorsGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
}

export interface RefundIdDeleteRequest {
    id: number;
}

export interface RefundIdGetRequest {
    id: number;
}

export interface RefundIdPutOperationRequest {
    id: number;
    refundIdPutRequest: RefundIdPutRequest;
}

export interface RefundPostOperationRequest {
    refundPostRequest: RefundPostRequest;
}

export interface RefundsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    transactionId?: Array<number>;
    id?: Array<number>;
    orderBy?: RefundsGetOrderByEnum;
    orderDirection?: RefundsGetOrderDirectionEnum;
}

export interface RelationshipIdDeleteRequest {
    id: number;
}

export interface RelationshipIdGetRequest {
    id: number;
}

export interface RelationshipIdPutOperationRequest {
    id: number;
    relationshipIdPutRequest: RelationshipIdPutRequest;
}

export interface RelationshipPostOperationRequest {
    relationshipPostRequest: RelationshipPostRequest;
}

export interface RelationshiproleIdGetRequest {
    id: number;
}

export interface RelationshiprolesGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    id?: Array<number>;
    name?: Array<string>;
    isActive?: boolean;
}

export interface SoftcreditIdDeleteRequest {
    id: number;
}

export interface SoftcreditIdGetRequest {
    id: number;
}

export interface SoftcreditIdPutRequest {
    id: number;
    transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf: TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf;
}

export interface SoftcreditPostOperationRequest {
    softcreditPostRequest: SoftcreditPostRequest;
}

export interface SoftcreditsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: SoftcreditsGetOrderByEnum;
    orderDirection?: SoftcreditsGetOrderDirectionEnum;
}

export interface TaskIdCompletePutRequest {
    id: number;
    saveAsInteraction?: boolean;
    completedDate?: Date;
}

export interface TaskIdDeleteRequest {
    id: number;
}

export interface TaskIdGetRequest {
    id: number;
}

export interface TaskIdPutOperationRequest {
    id: number;
    taskIdPutRequest: TaskIdPutRequest;
    sendNotifications?: boolean;
}

export interface TaskPostOperationRequest {
    taskPostRequest: TaskPostRequest;
    sendNotifications?: boolean;
}

export interface TasksGetRequest {
    skip?: number;
    take?: number;
    status?: Array<TasksGetStatusEnum>;
    minDueDate?: Date;
    maxDueDate?: Date;
    assignee?: Array<number>;
    channel?: Array<TasksGetChannelEnum>;
    purpose?: Array<TasksGetPurposeEnum>;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: TasksGetOrderByEnum;
    orderDirection?: TasksGetOrderDirectionEnum;
}

export interface TransactionIdDeleteRequest {
    id: number;
}

export interface TransactionIdGetRequest {
    id: number;
}

export interface TransactionIdPutOperationRequest {
    id: number;
    transactionIdPutRequest: TransactionIdPutRequest;
}

export interface TransactionPostOperationRequest {
    transactionPostRequest: TransactionPostRequest;
}

export interface TransactionsDesignationIdGetRequest {
    id: number;
}

export interface TransactionsDesignationsGetRequest {
    skip?: number;
    take?: number;
    designationNumbers?: Array<number>;
    transactionIds?: Array<number>;
    id?: Array<number>;
    orderBy?: TransactionsDesignationsGetOrderByEnum;
    orderDirection?: TransactionsDesignationsGetOrderDirectionEnum;
}

export interface TransactionsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    transactionNumber?: Array<number>;
    accountId?: Array<number>;
    id?: Array<number>;
    type?: Array<TransactionsGetTypeEnum>;
    minAmount?: number;
    maxAmount?: number;
    orderBy?: TransactionsGetOrderByEnum;
    orderDirection?: TransactionsGetOrderDirectionEnum;
}

export interface TributeIdGetRequest {
    id: number;
}

export interface TributeIdPutOperationRequest {
    id: number;
    tributeIdPutRequest: TributeIdPutRequest;
}

export interface TributePostOperationRequest {
    tributePostRequest: TributePostRequest;
}

export interface TributesGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
}

export interface TributesSearchGetRequest {
    skip?: number;
    take?: number;
    search?: string;
}

export interface WalletitemIdDeleteRequest {
    id: number;
}

export interface WalletitemIdGetRequest {
    id: number;
}

export interface WalletitemPostOperationRequest {
    walletitemPostRequest: WalletitemPostRequest;
}

export interface WalletitemsGetRequest {
    skip?: number;
    take?: number;
    requireActiveProcessor?: boolean;
    type?: WalletitemsGetTypeEnum;
    constituent?: Array<number>;
    id?: Array<number>;
}

/**
 * 
 */
export class BloomerangApi extends runtime.BaseAPI {

    /**
     * Deletes an address
     */
    async addressIdDeleteRaw(requestParameters: AddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an address
     */
    async addressIdDelete(requestParameters: AddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.addressIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an address by ID
     */
    async addressIdGetRaw(requestParameters: AddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Gets an address by ID
     */
    async addressIdGet(requestParameters: AddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an address
     */
    async addressIdPutRaw(requestParameters: AddressIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressIdPut().'
            );
        }

        if (requestParameters['constituentPostRequestAllOfAllOfPrimaryAddress'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequestAllOfAllOfPrimaryAddress',
                'Required parameter "constituentPostRequestAllOfAllOfPrimaryAddress" was null or undefined when calling addressIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestAllOfAllOfPrimaryAddressToJSON(requestParameters['constituentPostRequestAllOfAllOfPrimaryAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Updates an address
     */
    async addressIdPut(requestParameters: AddressIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address
     */
    async addressPostRaw(requestParameters: AddressPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress>> {
        if (requestParameters['addressPostRequest'] == null) {
            throw new runtime.RequiredError(
                'addressPostRequest',
                'Required parameter "addressPostRequest" was null or undefined when calling addressPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/address`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressPostRequestToJSON(requestParameters['addressPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddressFromJSON(jsonValue));
    }

    /**
     * Creates an address
     */
    async addressPost(requestParameters: AddressPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryAddress> {
        const response = await this.addressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of addresses.
     */
    async addressesGetRaw(requestParameters: AddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of addresses.
     */
    async addressesGet(requestParameters: AddressesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesGet200Response> {
        const response = await this.addressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a appeal by ID
     */
    async appealIdGetRaw(requestParameters: AppealIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appealIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a appeal by ID
     */
    async appealIdGet(requestParameters: AppealIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an appeal
     */
    async appealIdPutRaw(requestParameters: AppealIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appealIdPut().'
            );
        }

        if (requestParameters['appealIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'appealIdPutRequest',
                'Required parameter "appealIdPutRequest" was null or undefined when calling appealIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppealIdPutRequestToJSON(requestParameters['appealIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates an appeal
     */
    async appealIdPut(requestParameters: AppealIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an appeal
     */
    async appealPostRaw(requestParameters: AppealPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['appealPostRequest'] == null) {
            throw new runtime.RequiredError(
                'appealPostRequest',
                'Required parameter "appealPostRequest" was null or undefined when calling appealPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppealPostRequestToJSON(requestParameters['appealPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates an appeal
     */
    async appealPost(requestParameters: AppealPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200ResponseAllOfResultsInner> {
        const response = await this.appealPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of appeals
     */
    async appealsGetRaw(requestParameters: AppealsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppealsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/appeals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppealsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of appeals
     */
    async appealsGet(requestParameters: AppealsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppealsGet200Response> {
        const response = await this.appealsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a campaign by ID
     */
    async campaignIdGetRaw(requestParameters: CampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a campaign by ID
     */
    async campaignIdGet(requestParameters: CampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a campaign
     */
    async campaignIdPutRaw(requestParameters: CampaignIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignIdPut().'
            );
        }

        if (requestParameters['campaignIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignIdPutRequest',
                'Required parameter "campaignIdPutRequest" was null or undefined when calling campaignIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignIdPutRequestToJSON(requestParameters['campaignIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a campaign
     */
    async campaignIdPut(requestParameters: CampaignIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a campaign
     */
    async campaignPostRaw(requestParameters: CampaignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['campaignPostRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignPostRequest',
                'Required parameter "campaignPostRequest" was null or undefined when calling campaignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignPostRequestToJSON(requestParameters['campaignPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a campaign
     */
    async campaignPost(requestParameters: CampaignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200ResponseAllOfResultsInner> {
        const response = await this.campaignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of campaigns
     */
    async campaignsGetRaw(requestParameters: CampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['hasGoal'] != null) {
            queryParameters['hasGoal'] = requestParameters['hasGoal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of campaigns
     */
    async campaignsGet(requestParameters: CampaignsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200Response> {
        const response = await this.campaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refreshes campaign goals
     */
    async campaignsRefreshsummariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/refreshsummaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Refreshes campaign goals
     */
    async campaignsRefreshsummariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsGet200Response> {
        const response = await this.campaignsRefreshsummariesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesGetRaw(requestParameters: ConstituentDuplicatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentDuplicatesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organizationName'] = requestParameters['organizationName'];
        }

        if (requestParameters['street'] != null) {
            queryParameters['street'] = requestParameters['street'];
        }

        if (requestParameters['phoneNumber'] != null) {
            queryParameters['phoneNumber'] = requestParameters['phoneNumber'];
        }

        if (requestParameters['emailAddress'] != null) {
            queryParameters['emailAddress'] = requestParameters['emailAddress'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/duplicates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentDuplicatesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesGet(requestParameters: ConstituentDuplicatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentDuplicatesGet200Response> {
        const response = await this.constituentDuplicatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesPostRaw(requestParameters: ConstituentDuplicatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentDuplicatesGet200Response>> {
        if (requestParameters['constituentDuplicatesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentDuplicatesPostRequest',
                'Required parameter "constituentDuplicatesPostRequest" was null or undefined when calling constituentDuplicatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/duplicates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentDuplicatesPostRequestToJSON(requestParameters['constituentDuplicatesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentDuplicatesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesPost(requestParameters: ConstituentDuplicatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentDuplicatesGet200Response> {
        const response = await this.constituentDuplicatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a constituent
     */
    async constituentIdDeleteRaw(requestParameters: ConstituentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a constituent
     */
    async constituentIdDelete(requestParameters: ConstituentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.constituentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a constituent by ID
     */
    async constituentIdGetRaw(requestParameters: ConstituentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a constituent by ID
     */
    async constituentIdGet(requestParameters: ConstituentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInner> {
        const response = await this.constituentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a constituent
     */
    async constituentIdPutRaw(requestParameters: ConstituentIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdPut().'
            );
        }

        if (requestParameters['constituentIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentIdPutRequest',
                'Required parameter "constituentIdPutRequest" was null or undefined when calling constituentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentIdPutRequestToJSON(requestParameters['constituentIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a constituent
     */
    async constituentIdPut(requestParameters: ConstituentIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all Relationships for the specified constituent.
     */
    async constituentIdRelationshipsGetRaw(requestParameters: ConstituentIdRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentIdRelationshipsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdRelationshipsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/relationships`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentIdRelationshipsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets all Relationships for the specified constituent.
     */
    async constituentIdRelationshipsGet(requestParameters: ConstituentIdRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentIdRelationshipsGet200Response> {
        const response = await this.constituentIdRelationshipsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves TimelineEntrySummary for the Constituent or all members of a Household (if Household ID is passed in). Excludes transactions the user didn’t create if the user only has access to view transactions they create.
     */
    async constituentIdTimelineGetRaw(requestParameters: ConstituentIdTimelineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentIdTimelineGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdTimelineGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/timeline`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentIdTimelineGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves TimelineEntrySummary for the Constituent or all members of a Household (if Household ID is passed in). Excludes transactions the user didn’t create if the user only has access to view transactions they create.
     */
    async constituentIdTimelineGet(requestParameters: ConstituentIdTimelineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentIdTimelineGet200Response> {
        const response = await this.constituentIdTimelineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the communication settings for a constituent
     */
    async constituentIdUpdateCommunicationSettingsPutRaw(requestParameters: ConstituentIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdUpdateCommunicationSettingsPut().'
            );
        }

        if (requestParameters['constituentIdUpdateCommunicationSettingsPutRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentIdUpdateCommunicationSettingsPutRequest',
                'Required parameter "constituentIdUpdateCommunicationSettingsPutRequest" was null or undefined when calling constituentIdUpdateCommunicationSettingsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/updateCommunicationSettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentIdUpdateCommunicationSettingsPutRequestToJSON(requestParameters['constituentIdUpdateCommunicationSettingsPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the communication settings for a constituent
     */
    async constituentIdUpdateCommunicationSettingsPut(requestParameters: ConstituentIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentIdUpdateCommunicationSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When merging, the database will look for a possible duplicate defined as a name plus one piece of contact info (address, email, or phone). If a duplicate is found, the data passed in will be merged into an existing constituent. If no duplicate is found, a new constituent will be created.  Note that this endpoint does not accept SecondaryAddresses, SecondaryEmails, or SecondaryPhones and you will receive an exception if you pass those in..
     * Creates a new constituent or merges data with an existing constituent
     */
    async constituentMergePostRaw(requestParameters: ConstituentMergePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['constituentMergePostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentMergePostRequest',
                'Required parameter "constituentMergePostRequest" was null or undefined when calling constituentMergePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentMergePostRequestToJSON(requestParameters['constituentMergePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * When merging, the database will look for a possible duplicate defined as a name plus one piece of contact info (address, email, or phone). If a duplicate is found, the data passed in will be merged into an existing constituent. If no duplicate is found, a new constituent will be created.  Note that this endpoint does not accept SecondaryAddresses, SecondaryEmails, or SecondaryPhones and you will receive an exception if you pass those in..
     * Creates a new constituent or merges data with an existing constituent
     */
    async constituentMergePost(requestParameters: ConstituentMergePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentMergePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a constituent
     */
    async constituentPostRaw(requestParameters: ConstituentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['constituentPostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequest',
                'Required parameter "constituentPostRequest" was null or undefined when calling constituentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestToJSON(requestParameters['constituentPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a constituent
     */
    async constituentPost(requestParameters: ConstituentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of constituents
     */
    async constituentsGetRaw(requestParameters: ConstituentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['isFavorite'] != null) {
            queryParameters['isFavorite'] = requestParameters['isFavorite'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['customFieldId'] != null) {
            queryParameters['customFieldId'] = requestParameters['customFieldId'];
        }

        if (requestParameters['customFieldValue'] != null) {
            queryParameters['customFieldValue'] = requestParameters['customFieldValue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of constituents
     */
    async constituentsGet(requestParameters: ConstituentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200Response> {
        const response = await this.constituentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for constituents and households
     */
    async constituentsSearchGetRaw(requestParameters: ConstituentsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituents/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Searches for constituents and households
     */
    async constituentsSearchGet(requestParameters: ConstituentsSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200Response> {
        const response = await this.constituentsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom field categories.
     */
    async customFieldCategoriesTypeGetRaw(requestParameters: CustomFieldCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomFieldCategoriesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customFieldCategoriesTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customFieldCategories/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldCategoriesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom field categories.
     */
    async customFieldCategoriesTypeGet(requestParameters: CustomFieldCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomFieldCategoriesTypeGet200ResponseInner>> {
        const response = await this.customFieldCategoriesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom fields.
     */
    async customFieldsTypeGetRaw(requestParameters: CustomFieldsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomFieldsTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customFieldsTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customFields/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldsTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom fields.
     */
    async customFieldsTypeGet(requestParameters: CustomFieldsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomFieldsTypeGet200ResponseInner>> {
        const response = await this.customFieldsTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom values for the given field.
     */
    async customValuesTypeFieldIdGetRaw(requestParameters: CustomValuesTypeFieldIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomValuesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customValuesTypeFieldIdGet().'
            );
        }

        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling customValuesTypeFieldIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customValues/{type}/{fieldId}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomValuesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom values for the given field.
     */
    async customValuesTypeFieldIdGet(requestParameters: CustomValuesTypeFieldIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomValuesTypeGet200ResponseInner>> {
        const response = await this.customValuesTypeFieldIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of custom values for all pick fields of the given object type.
     */
    async customValuesTypeGetRaw(requestParameters: CustomValuesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomValuesTypeGet200ResponseInner>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling customValuesTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/customValues/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomValuesTypeGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a list of custom values for all pick fields of the given object type.
     */
    async customValuesTypeGet(requestParameters: CustomValuesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomValuesTypeGet200ResponseInner>> {
        const response = await this.customValuesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets general organization information.
     */
    async databaseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatabaseGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/database`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets general organization information.
     */
    async databaseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatabaseGet200Response> {
        const response = await this.databaseGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes an email address
     */
    async emailIdDeleteRaw(requestParameters: EmailIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an email address
     */
    async emailIdDelete(requestParameters: EmailIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.emailIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an email address by ID
     */
    async emailIdGetRaw(requestParameters: EmailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Gets an email address by ID
     */
    async emailIdGet(requestParameters: EmailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an email address
     */
    async emailIdPutRaw(requestParameters: EmailIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdPut().'
            );
        }

        if (requestParameters['constituentPostRequestAllOfAllOfSecondaryEmailsInner'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequestAllOfAllOfSecondaryEmailsInner',
                'Required parameter "constituentPostRequestAllOfAllOfSecondaryEmailsInner" was null or undefined when calling emailIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerToJSON(requestParameters['constituentPostRequestAllOfAllOfSecondaryEmailsInner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Updates an email address
     */
    async emailIdPut(requestParameters: EmailIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a email interest by ID
     */
    async emailInterestIdGetRaw(requestParameters: EmailInterestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailInterestsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailInterestIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/emailInterest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailInterestsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a email interest by ID
     */
    async emailInterestIdGet(requestParameters: EmailInterestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailInterestsGet200ResponseAllOfResultsInner> {
        const response = await this.emailInterestIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of email interests.
     */
    async emailInterestsGetRaw(requestParameters: EmailInterestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailInterestsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/emailInterests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailInterestsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of email interests.
     */
    async emailInterestsGet(requestParameters: EmailInterestsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailInterestsGet200Response> {
        const response = await this.emailInterestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an email address
     */
    async emailPostRaw(requestParameters: EmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['emailPostRequest'] == null) {
            throw new runtime.RequiredError(
                'emailPostRequest',
                'Required parameter "emailPostRequest" was null or undefined when calling emailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailPostRequestToJSON(requestParameters['emailPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Creates an email address
     */
    async emailPost(requestParameters: EmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of email addresses.
     */
    async emailsGetRaw(requestParameters: EmailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of email addresses.
     */
    async emailsGet(requestParameters: EmailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailsGet200Response> {
        const response = await this.emailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a fund by ID
     */
    async fundIdGetRaw(requestParameters: FundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fundIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a fund by ID
     */
    async fundIdGet(requestParameters: FundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a fund
     */
    async fundIdPutRaw(requestParameters: FundIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fundIdPut().'
            );
        }

        if (requestParameters['fundsGet200ResponseAllOfResultsInner'] == null) {
            throw new runtime.RequiredError(
                'fundsGet200ResponseAllOfResultsInner',
                'Required parameter "fundsGet200ResponseAllOfResultsInner" was null or undefined when calling fundIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FundsGet200ResponseAllOfResultsInnerToJSON(requestParameters['fundsGet200ResponseAllOfResultsInner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a fund
     */
    async fundIdPut(requestParameters: FundIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a fund
     */
    async fundPostRaw(requestParameters: FundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['fundPostRequest'] == null) {
            throw new runtime.RequiredError(
                'fundPostRequest',
                'Required parameter "fundPostRequest" was null or undefined when calling fundPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FundPostRequestToJSON(requestParameters['fundPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a fund
     */
    async fundPost(requestParameters: FundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200ResponseAllOfResultsInner> {
        const response = await this.fundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of funds
     */
    async fundsGetRaw(requestParameters: FundsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/funds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of funds
     */
    async fundsGet(requestParameters: FundsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundsGet200Response> {
        const response = await this.fundsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only the household will be deleted, not the members of the household.
     * Deletes a household
     */
    async householdIdDeleteRaw(requestParameters: HouseholdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Only the household will be deleted, not the members of the household.
     * Deletes a household
     */
    async householdIdDelete(requestParameters: HouseholdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.householdIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a household by ID
     */
    async householdIdGetRaw(requestParameters: HouseholdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Gets a household by ID
     */
    async householdIdGet(requestParameters: HouseholdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a household
     */
    async householdIdPutRaw(requestParameters: HouseholdIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdPut().'
            );
        }

        if (requestParameters['householdIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'householdIdPutRequest',
                'Required parameter "householdIdPutRequest" was null or undefined when calling householdIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdIdPutRequestToJSON(requestParameters['householdIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Updates a household
     */
    async householdIdPut(requestParameters: HouseholdIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the communication settings for a household and all its members
     */
    async householdIdUpdateCommunicationSettingsPutRaw(requestParameters: HouseholdIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling householdIdUpdateCommunicationSettingsPut().'
            );
        }

        if (requestParameters['householdIdUpdateCommunicationSettingsPutRequest'] == null) {
            throw new runtime.RequiredError(
                'householdIdUpdateCommunicationSettingsPutRequest',
                'Required parameter "householdIdUpdateCommunicationSettingsPutRequest" was null or undefined when calling householdIdUpdateCommunicationSettingsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household/{id}/updateCommunicationSettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdIdUpdateCommunicationSettingsPutRequestToJSON(requestParameters['householdIdUpdateCommunicationSettingsPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Updates the communication settings for a household and all its members
     */
    async householdIdUpdateCommunicationSettingsPut(requestParameters: HouseholdIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdIdUpdateCommunicationSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Household
     */
    async householdPostRaw(requestParameters: HouseholdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf>> {
        if (requestParameters['householdPostRequest'] == null) {
            throw new runtime.RequiredError(
                'householdPostRequest',
                'Required parameter "householdPostRequest" was null or undefined when calling householdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/household`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdPostRequestToJSON(requestParameters['householdPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseAllOfResultsInnerOneOfFromJSON(jsonValue));
    }

    /**
     * Creates a Household
     */
    async householdPost(requestParameters: HouseholdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200ResponseAllOfResultsInnerOneOf> {
        const response = await this.householdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of households
     */
    async householdsGetRaw(requestParameters: HouseholdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HouseholdsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/households`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HouseholdsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of households
     */
    async householdsGet(requestParameters: HouseholdsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HouseholdsGet200Response> {
        const response = await this.householdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an interaction
     */
    async interactionIdDeleteRaw(requestParameters: InteractionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an interaction
     */
    async interactionIdDelete(requestParameters: InteractionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.interactionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an interaction by ID
     */
    async interactionIdGetRaw(requestParameters: InteractionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets an interaction by ID
     */
    async interactionIdGet(requestParameters: InteractionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an interaction
     */
    async interactionIdPutRaw(requestParameters: InteractionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling interactionIdPut().'
            );
        }

        if (requestParameters['interactionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'interactionIdPutRequest',
                'Required parameter "interactionIdPutRequest" was null or undefined when calling interactionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InteractionIdPutRequestToJSON(requestParameters['interactionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates an interaction
     */
    async interactionIdPut(requestParameters: InteractionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an interaction
     */
    async interactionPostRaw(requestParameters: InteractionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['interactionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'interactionPostRequest',
                'Required parameter "interactionPostRequest" was null or undefined when calling interactionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InteractionPostRequestToJSON(requestParameters['interactionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates an interaction
     */
    async interactionPost(requestParameters: InteractionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200ResponseAllOfResultsInner> {
        const response = await this.interactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of interactions.
     */
    async interactionsGetRaw(requestParameters: InteractionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InteractionsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['purpose'] != null) {
            queryParameters['purpose'] = requestParameters['purpose']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/interactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InteractionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of interactions.
     */
    async interactionsGet(requestParameters: InteractionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InteractionsGet200Response> {
        const response = await this.interactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the API keys for a given user.
     */
    async keysPostRaw(requestParameters: KeysPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeysPost200Response>> {
        if (requestParameters['keysPostRequest'] == null) {
            throw new runtime.RequiredError(
                'keysPostRequest',
                'Required parameter "keysPostRequest" was null or undefined when calling keysPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeysPostRequestToJSON(requestParameters['keysPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeysPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the API keys for a given user.
     */
    async keysPost(requestParameters: KeysPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeysPost200Response> {
        const response = await this.keysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a note
     */
    async noteIdDeleteRaw(requestParameters: NoteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a note
     */
    async noteIdDelete(requestParameters: NoteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.noteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a note by ID
     */
    async noteIdGetRaw(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a note by ID
     */
    async noteIdGet(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.noteIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a note
     */
    async noteIdPutRaw(requestParameters: NoteIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling noteIdPut().'
            );
        }

        if (requestParameters['noteIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'noteIdPutRequest',
                'Required parameter "noteIdPutRequest" was null or undefined when calling noteIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteIdPutRequestToJSON(requestParameters['noteIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a note
     */
    async noteIdPut(requestParameters: NoteIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.noteIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a note
     */
    async notePostRaw(requestParameters: NotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['notePostRequest'] == null) {
            throw new runtime.RequiredError(
                'notePostRequest',
                'Required parameter "notePostRequest" was null or undefined when calling notePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotePostRequestToJSON(requestParameters['notePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a note
     */
    async notePost(requestParameters: NotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200ResponseAllOfResultsInner> {
        const response = await this.notePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of notes.
     */
    async notesGetRaw(requestParameters: NotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of notes.
     */
    async notesGet(requestParameters: NotesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200Response> {
        const response = await this.notesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a phone
     */
    async phoneIdDeleteRaw(requestParameters: PhoneIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a phone
     */
    async phoneIdDelete(requestParameters: PhoneIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.phoneIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a phone by ID
     */
    async phoneIdGetRaw(requestParameters: PhoneIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Gets a phone by ID
     */
    async phoneIdGet(requestParameters: PhoneIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phoneIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a phone
     */
    async phoneIdPutRaw(requestParameters: PhoneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdPut().'
            );
        }

        if (requestParameters['constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone'] == null) {
            throw new runtime.RequiredError(
                'constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone',
                'Required parameter "constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone" was null or undefined when calling phoneIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneToJSON(requestParameters['constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Updates a phone
     */
    async phoneIdPut(requestParameters: PhoneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phoneIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a phone
     */
    async phonePostRaw(requestParameters: PhonePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['phonePostRequest'] == null) {
            throw new runtime.RequiredError(
                'phonePostRequest',
                'Required parameter "phonePostRequest" was null or undefined when calling phonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhonePostRequestToJSON(requestParameters['phonePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Creates a phone
     */
    async phonePost(requestParameters: PhonePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of phones.
     */
    async phonesGetRaw(requestParameters: PhonesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhonesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhonesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of phones.
     */
    async phonesGet(requestParameters: PhonesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhonesGet200Response> {
        const response = await this.phonesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of pledge installments for a given set of criteria. Note that this will not persist to the database, but these can be used as the PledgeInstallments property when creating or modifying a Pledge.
     */
    async pledgeGenerateInstallmentsGetRaw(requestParameters: PledgeGenerateInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PledgeGenerateInstallmentsGet200ResponseInner>>> {
        if (requestParameters['pledgeAmount'] == null) {
            throw new runtime.RequiredError(
                'pledgeAmount',
                'Required parameter "pledgeAmount" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['installmentAmount'] == null) {
            throw new runtime.RequiredError(
                'installmentAmount',
                'Required parameter "installmentAmount" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['firstInstallmentDate'] == null) {
            throw new runtime.RequiredError(
                'firstInstallmentDate',
                'Required parameter "firstInstallmentDate" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['frequency'] == null) {
            throw new runtime.RequiredError(
                'frequency',
                'Required parameter "frequency" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pledgeAmount'] != null) {
            queryParameters['pledgeAmount'] = requestParameters['pledgeAmount'];
        }

        if (requestParameters['installmentAmount'] != null) {
            queryParameters['installmentAmount'] = requestParameters['installmentAmount'];
        }

        if (requestParameters['firstInstallmentDate'] != null) {
            queryParameters['firstInstallmentDate'] = (requestParameters['firstInstallmentDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['day1'] != null) {
            queryParameters['day1'] = requestParameters['day1'];
        }

        if (requestParameters['day2'] != null) {
            queryParameters['day2'] = requestParameters['day2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/generateInstallments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PledgeGenerateInstallmentsGet200ResponseInnerFromJSON));
    }

    /**
     * Returns a list of pledge installments for a given set of criteria. Note that this will not persist to the database, but these can be used as the PledgeInstallments property when creating or modifying a Pledge.
     */
    async pledgeGenerateInstallmentsGet(requestParameters: PledgeGenerateInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PledgeGenerateInstallmentsGet200ResponseInner>> {
        const response = await this.pledgeGenerateInstallmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of pledge installments for a given pledge.
     */
    async pledgeIdInstallmentsGetRaw(requestParameters: PledgeIdInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdInstallmentsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdInstallmentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/installments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdInstallmentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of pledge installments for a given pledge.
     */
    async pledgeIdInstallmentsGet(requestParameters: PledgeIdInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdInstallmentsGet200Response> {
        const response = await this.pledgeIdInstallmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of payment failures for the specified pledge
     */
    async pledgeIdPaymentFailuresGetRaw(requestParameters: PledgeIdPaymentFailuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdPaymentFailuresGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdPaymentFailuresGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/paymentFailures`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdPaymentFailuresGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of payment failures for the specified pledge
     */
    async pledgeIdPaymentFailuresGet(requestParameters: PledgeIdPaymentFailuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdPaymentFailuresGet200Response> {
        const response = await this.pledgeIdPaymentFailuresGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of successful payments for the specified pledge
     */
    async pledgeIdPaymentsGetRaw(requestParameters: PledgeIdPaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdPaymentsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdPaymentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/payments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdPaymentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of successful payments for the specified pledge
     */
    async pledgeIdPaymentsGet(requestParameters: PledgeIdPaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdPaymentsGet200Response> {
        const response = await this.pledgeIdPaymentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Writes off a pledge
     */
    async pledgeIdWriteOffPostRaw(requestParameters: PledgeIdWriteOffPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdWriteOffPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdWriteOffPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/writeOff`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdWriteOffPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Writes off a pledge
     */
    async pledgeIdWriteOffPost(requestParameters: PledgeIdWriteOffPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdWriteOffPost200Response> {
        const response = await this.pledgeIdWriteOffPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a processor by ID
     */
    async processorIdGetRaw(requestParameters: ProcessorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling processorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/processor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a processor by ID
     */
    async processorIdGet(requestParameters: ProcessorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorsGet200ResponseAllOfResultsInner> {
        const response = await this.processorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of processors
     */
    async processorsGetRaw(requestParameters: ProcessorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/processors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of processors
     */
    async processorsGet(requestParameters: ProcessorsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorsGet200Response> {
        const response = await this.processorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a refund
     */
    async refundIdDeleteRaw(requestParameters: RefundIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a refund
     */
    async refundIdDelete(requestParameters: RefundIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.refundIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a refund by ID
     */
    async refundIdGetRaw(requestParameters: RefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a refund by ID
     */
    async refundIdGet(requestParameters: RefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a refund
     */
    async refundIdPutRaw(requestParameters: RefundIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refundIdPut().'
            );
        }

        if (requestParameters['refundIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'refundIdPutRequest',
                'Required parameter "refundIdPutRequest" was null or undefined when calling refundIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refund/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RefundIdPutRequestToJSON(requestParameters['refundIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a refund
     */
    async refundIdPut(requestParameters: RefundIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a refund
     */
    async refundPostRaw(requestParameters: RefundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['refundPostRequest'] == null) {
            throw new runtime.RequiredError(
                'refundPostRequest',
                'Required parameter "refundPostRequest" was null or undefined when calling refundPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundPostRequestToJSON(requestParameters['refundPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a refund
     */
    async refundPost(requestParameters: RefundPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200ResponseAllOfResultsInner> {
        const response = await this.refundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of refunds.
     */
    async refundsGetRaw(requestParameters: RefundsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['transactionId'] != null) {
            queryParameters['transactionId'] = requestParameters['transactionId']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/refunds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of refunds.
     */
    async refundsGet(requestParameters: RefundsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundsGet200Response> {
        const response = await this.refundsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Relationship
     */
    async relationshipIdDeleteRaw(requestParameters: RelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a Relationship
     */
    async relationshipIdDelete(requestParameters: RelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.relationshipIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a relationship
     */
    async relationshipIdGetRaw(requestParameters: RelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a relationship
     */
    async relationshipIdGet(requestParameters: RelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a relationship
     */
    async relationshipIdPutRaw(requestParameters: RelationshipIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshipIdPut().'
            );
        }

        if (requestParameters['relationshipIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'relationshipIdPutRequest',
                'Required parameter "relationshipIdPutRequest" was null or undefined when calling relationshipIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipIdPutRequestToJSON(requestParameters['relationshipIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a relationship
     */
    async relationshipIdPut(requestParameters: RelationshipIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Relationship between two non-household Constituents
     */
    async relationshipPostRaw(requestParameters: RelationshipPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200Response>> {
        if (requestParameters['relationshipPostRequest'] == null) {
            throw new runtime.RequiredError(
                'relationshipPostRequest',
                'Required parameter "relationshipPostRequest" was null or undefined when calling relationshipPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationship`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipPostRequestToJSON(requestParameters['relationshipPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a Relationship between two non-household Constituents
     */
    async relationshipPost(requestParameters: RelationshipPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200Response> {
        const response = await this.relationshipPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a relationship role by ID
     */
    async relationshiproleIdGetRaw(requestParameters: RelationshiproleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipPost200ResponseRelationshipRole1>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling relationshiproleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationshiprole/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipPost200ResponseRelationshipRole1FromJSON(jsonValue));
    }

    /**
     * Gets a relationship role by ID
     */
    async relationshiproleIdGet(requestParameters: RelationshiproleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipPost200ResponseRelationshipRole1> {
        const response = await this.relationshiproleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of relationship roles
     */
    async relationshiprolesGetRaw(requestParameters: RelationshiprolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshiprolesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relationshiproles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshiprolesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of relationship roles
     */
    async relationshiprolesGet(requestParameters: RelationshiprolesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshiprolesGet200Response> {
        const response = await this.relationshiprolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a soft credit
     */
    async softcreditIdDeleteRaw(requestParameters: SoftcreditIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a soft credit
     */
    async softcreditIdDelete(requestParameters: SoftcreditIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.softcreditIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a soft credit by ID
     */
    async softcreditIdGetRaw(requestParameters: SoftcreditIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a soft credit by ID
     */
    async softcreditIdGet(requestParameters: SoftcreditIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a soft credit
     */
    async softcreditIdPutRaw(requestParameters: SoftcreditIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling softcreditIdPut().'
            );
        }

        if (requestParameters['transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf'] == null) {
            throw new runtime.RequiredError(
                'transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf',
                'Required parameter "transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf" was null or undefined when calling softcreditIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOfToJSON(requestParameters['transactionIdPutRequestAllOfDesignationsInnerOneOfAllOfSoftCreditsInnerOneOf']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a soft credit
     */
    async softcreditIdPut(requestParameters: SoftcreditIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a soft credit
     */
    async softcreditPostRaw(requestParameters: SoftcreditPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['softcreditPostRequest'] == null) {
            throw new runtime.RequiredError(
                'softcreditPostRequest',
                'Required parameter "softcreditPostRequest" was null or undefined when calling softcreditPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SoftcreditPostRequestToJSON(requestParameters['softcreditPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a soft credit
     */
    async softcreditPost(requestParameters: SoftcreditPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200ResponseAllOfResultsInner> {
        const response = await this.softcreditPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of soft credits.
     */
    async softcreditsGetRaw(requestParameters: SoftcreditsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftcreditsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/softcredits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftcreditsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of soft credits.
     */
    async softcreditsGet(requestParameters: SoftcreditsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftcreditsGet200Response> {
        const response = await this.softcreditsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Completes a task.
     */
    async taskIdCompletePutRaw(requestParameters: TaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdCompletePut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['saveAsInteraction'] != null) {
            queryParameters['saveAsInteraction'] = requestParameters['saveAsInteraction'];
        }

        if (requestParameters['completedDate'] != null) {
            queryParameters['completedDate'] = (requestParameters['completedDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}/complete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Completes a task.
     */
    async taskIdCompletePut(requestParameters: TaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdCompletePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a task
     */
    async taskIdDeleteRaw(requestParameters: TaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a task
     */
    async taskIdDelete(requestParameters: TaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.taskIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a task by ID
     */
    async taskIdGetRaw(requestParameters: TaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a task by ID
     */
    async taskIdGet(requestParameters: TaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a task
     */
    async taskIdPutRaw(requestParameters: TaskIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdPut().'
            );
        }

        if (requestParameters['taskIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'taskIdPutRequest',
                'Required parameter "taskIdPutRequest" was null or undefined when calling taskIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sendNotifications'] != null) {
            queryParameters['sendNotifications'] = requestParameters['sendNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskIdPutRequestToJSON(requestParameters['taskIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a task
     */
    async taskIdPut(requestParameters: TaskIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task
     */
    async taskPostRaw(requestParameters: TaskPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['taskPostRequest'] == null) {
            throw new runtime.RequiredError(
                'taskPostRequest',
                'Required parameter "taskPostRequest" was null or undefined when calling taskPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sendNotifications'] != null) {
            queryParameters['sendNotifications'] = requestParameters['sendNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskPostRequestToJSON(requestParameters['taskPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a task
     */
    async taskPost(requestParameters: TaskPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of tasks.
     */
    async tasksGetRaw(requestParameters: TasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['minDueDate'] != null) {
            queryParameters['minDueDate'] = (requestParameters['minDueDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['maxDueDate'] != null) {
            queryParameters['maxDueDate'] = (requestParameters['maxDueDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['assignee'] != null) {
            queryParameters['assignee'] = requestParameters['assignee']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['purpose'] != null) {
            queryParameters['purpose'] = requestParameters['purpose']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tasks.
     */
    async tasksGet(requestParameters: TasksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200Response> {
        const response = await this.tasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a transaction
     */
    async transactionIdDeleteRaw(requestParameters: TransactionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a transaction
     */
    async transactionIdDelete(requestParameters: TransactionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.transactionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a transaction by ID
     */
    async transactionIdGetRaw(requestParameters: TransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a transaction by ID
     */
    async transactionIdGet(requestParameters: TransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a transaction
     */
    async transactionIdPutRaw(requestParameters: TransactionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionIdPut().'
            );
        }

        if (requestParameters['transactionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'transactionIdPutRequest',
                'Required parameter "transactionIdPutRequest" was null or undefined when calling transactionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionIdPutRequestToJSON(requestParameters['transactionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a transaction
     */
    async transactionIdPut(requestParameters: TransactionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a transaction in the CRM database. Only initiates a payment charge if a WalletItem is provided. Only generates a receipt if the request comes from Bloomerang mobile.
     * Creates a transaction
     */
    async transactionPostRaw(requestParameters: TransactionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['transactionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'transactionPostRequest',
                'Required parameter "transactionPostRequest" was null or undefined when calling transactionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionPostRequestToJSON(requestParameters['transactionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a transaction in the CRM database. Only initiates a payment charge if a WalletItem is provided. Only generates a receipt if the request comes from Bloomerang mobile.
     * Creates a transaction
     */
    async transactionPost(requestParameters: TransactionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInner> {
        const response = await this.transactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a designation by ID
     */
    async transactionsDesignationIdGetRaw(requestParameters: TransactionsDesignationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transactionsDesignationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions/designation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a designation by ID
     */
    async transactionsDesignationIdGet(requestParameters: TransactionsDesignationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200ResponseAllOfResultsInnerAllOfDesignationsInner> {
        const response = await this.transactionsDesignationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of designations
     */
    async transactionsDesignationsGetRaw(requestParameters: TransactionsDesignationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsDesignationsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['designationNumbers'] != null) {
            queryParameters['designationNumbers'] = requestParameters['designationNumbers']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['transactionIds'] != null) {
            queryParameters['transactionIds'] = requestParameters['transactionIds']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions/designations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsDesignationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of designations
     */
    async transactionsDesignationsGet(requestParameters: TransactionsDesignationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsDesignationsGet200Response> {
        const response = await this.transactionsDesignationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of Transactions
     */
    async transactionsGetRaw(requestParameters: TransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['transactionNumber'] != null) {
            queryParameters['transactionNumber'] = requestParameters['transactionNumber']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['minAmount'] != null) {
            queryParameters['minAmount'] = requestParameters['minAmount'];
        }

        if (requestParameters['maxAmount'] != null) {
            queryParameters['maxAmount'] = requestParameters['maxAmount'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of Transactions
     */
    async transactionsGet(requestParameters: TransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGet200Response> {
        const response = await this.transactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a tribute by ID
     */
    async tributeIdGetRaw(requestParameters: TributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tributeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a tribute by ID
     */
    async tributeIdGet(requestParameters: TributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edits a tribute
     */
    async tributeIdPutRaw(requestParameters: TributeIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tributeIdPut().'
            );
        }

        if (requestParameters['tributeIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'tributeIdPutRequest',
                'Required parameter "tributeIdPutRequest" was null or undefined when calling tributeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TributeIdPutRequestToJSON(requestParameters['tributeIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Edits a tribute
     */
    async tributeIdPut(requestParameters: TributeIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a tribute
     */
    async tributePostRaw(requestParameters: TributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['tributePostRequest'] == null) {
            throw new runtime.RequiredError(
                'tributePostRequest',
                'Required parameter "tributePostRequest" was null or undefined when calling tributePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TributePostRequestToJSON(requestParameters['tributePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a tribute
     */
    async tributePost(requestParameters: TributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of tributes
     */
    async tributesGetRaw(requestParameters: TributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tributes
     */
    async tributesGet(requestParameters: TributesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200Response> {
        const response = await this.tributesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for active tributes
     */
    async tributesSearchGetRaw(requestParameters: TributesSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tributes/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Searches for active tributes
     */
    async tributesSearchGet(requestParameters: TributesSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200Response> {
        const response = await this.tributesSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the user corresponding to the private API key used.
     */
    async userCurrentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrentGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCurrentGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets the user corresponding to the private API key used.
     */
    async userCurrentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrentGet200Response> {
        const response = await this.userCurrentGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a wallet item
     */
    async walletitemIdDeleteRaw(requestParameters: WalletitemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletitemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a wallet item
     */
    async walletitemIdDelete(requestParameters: WalletitemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.walletitemIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a wallet item by ID
     */
    async walletitemIdGetRaw(requestParameters: WalletitemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletitemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a wallet item by ID
     */
    async walletitemIdGet(requestParameters: WalletitemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200ResponseAllOfResultsInner> {
        const response = await this.walletitemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a wallet item
     */
    async walletitemPostRaw(requestParameters: WalletitemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['walletitemPostRequest'] == null) {
            throw new runtime.RequiredError(
                'walletitemPostRequest',
                'Required parameter "walletitemPostRequest" was null or undefined when calling walletitemPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletitemPostRequestToJSON(requestParameters['walletitemPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a wallet item
     */
    async walletitemPost(requestParameters: WalletitemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200ResponseAllOfResultsInner> {
        const response = await this.walletitemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of wallet items for an account.
     */
    async walletitemsGetRaw(requestParameters: WalletitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['requireActiveProcessor'] != null) {
            queryParameters['requireActiveProcessor'] = requestParameters['requireActiveProcessor'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of wallet items for an account.
     */
    async walletitemsGet(requestParameters: WalletitemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200Response> {
        const response = await this.walletitemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetTypeEnum {
    Individual = 'Individual',
    Organization = 'Organization'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetOrderByEnum {
    Id = 'Id',
    CreatedDate = 'CreatedDate',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsSearchGetTypeEnum {
    Individual = 'Individual',
    Organization = 'Organization',
    Household = 'Household'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomFieldCategoriesTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomFieldsTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomValuesTypeFieldIdGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum CustomValuesTypeGetTypeEnum {
    Constituent = 'Constituent',
    Transaction = 'Transaction',
    Interaction = 'Interaction',
    Note = 'Note',
    Benevon = 'Benevon'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum InteractionsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum NotesGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum NotesGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum PledgeGenerateInstallmentsGetFrequencyEnum {
    Weekly = 'Weekly',
    EveryOtherWeekly = 'EveryOtherWeekly',
    TwiceMonthly = 'TwiceMonthly',
    Monthly = 'Monthly',
    EveryOtherMonthly = 'EveryOtherMonthly',
    Quarterly = 'Quarterly',
    Yearly = 'Yearly',
    Custom = 'Custom'
}
/**
  * @export
  * @enum {string}
  */
export enum RefundsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum RefundsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum SoftcreditsGetOrderByEnum {
    AccountId = 'AccountId',
    CreatedDate = 'CreatedDate',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum SoftcreditsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetStatusEnum {
    Active = 'Active',
    Complete = 'Complete',
    Archived = 'Archived'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsDesignationsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsDesignationsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetTypeEnum {
    Donation = 'Donation',
    Pledge = 'Pledge',
    PledgePayment = 'PledgePayment',
    RecurringDonation = 'RecurringDonation',
    RecurringDonationPayment = 'RecurringDonationPayment'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TransactionsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum WalletitemsGetTypeEnum {
    CreditCard = 'CreditCard',
    Eft = 'Eft',
    ApplePay = 'ApplePay',
    GooglePay = 'GooglePay'
}
