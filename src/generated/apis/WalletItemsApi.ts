/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipIdDelete201Response,
  WalletitemPostRequest,
  WalletitemsGet200Response,
  WalletitemsGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    WalletitemPostRequestFromJSON,
    WalletitemPostRequestToJSON,
    WalletitemsGet200ResponseFromJSON,
    WalletitemsGet200ResponseToJSON,
    WalletitemsGet200ResponseAllOfResultsInnerFromJSON,
    WalletitemsGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface WalletitemIdDeleteRequest {
    id: number;
}

export interface WalletitemIdGetRequest {
    id: number;
}

export interface WalletitemPostOperationRequest {
    walletitemPostRequest: WalletitemPostRequest;
}

export interface WalletitemsGetRequest {
    skip?: number;
    take?: number;
    requireActiveProcessor?: boolean;
    type?: WalletitemsGetTypeEnum;
    constituent?: Array<number>;
    id?: Array<number>;
}

/**
 * 
 */
export class WalletItemsApi extends runtime.BaseAPI {

    /**
     * Deletes a wallet item
     */
    async walletitemIdDeleteRaw(requestParameters: WalletitemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletitemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a wallet item
     */
    async walletitemIdDelete(requestParameters: WalletitemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.walletitemIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a wallet item by ID
     */
    async walletitemIdGetRaw(requestParameters: WalletitemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletitemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a wallet item by ID
     */
    async walletitemIdGet(requestParameters: WalletitemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200ResponseAllOfResultsInner> {
        const response = await this.walletitemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a wallet item
     */
    async walletitemPostRaw(requestParameters: WalletitemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['walletitemPostRequest'] == null) {
            throw new runtime.RequiredError(
                'walletitemPostRequest',
                'Required parameter "walletitemPostRequest" was null or undefined when calling walletitemPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletitemPostRequestToJSON(requestParameters['walletitemPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a wallet item
     */
    async walletitemPost(requestParameters: WalletitemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200ResponseAllOfResultsInner> {
        const response = await this.walletitemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of wallet items for an account.
     */
    async walletitemsGetRaw(requestParameters: WalletitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletitemsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['requireActiveProcessor'] != null) {
            queryParameters['requireActiveProcessor'] = requestParameters['requireActiveProcessor'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/walletitems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletitemsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of wallet items for an account.
     */
    async walletitemsGet(requestParameters: WalletitemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletitemsGet200Response> {
        const response = await this.walletitemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum WalletitemsGetTypeEnum {
    CreditCard = 'CreditCard',
    Eft = 'Eft',
    ApplePay = 'ApplePay',
    GooglePay = 'GooglePay'
}
