/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PledgeGenerateInstallmentsGet200ResponseInner,
  PledgeIdInstallmentsGet200Response,
  PledgeIdPaymentFailuresGet200Response,
  PledgeIdPaymentsGet200Response,
  PledgeIdWriteOffPost200Response,
} from '../models/index';
import {
    PledgeGenerateInstallmentsGet200ResponseInnerFromJSON,
    PledgeGenerateInstallmentsGet200ResponseInnerToJSON,
    PledgeIdInstallmentsGet200ResponseFromJSON,
    PledgeIdInstallmentsGet200ResponseToJSON,
    PledgeIdPaymentFailuresGet200ResponseFromJSON,
    PledgeIdPaymentFailuresGet200ResponseToJSON,
    PledgeIdPaymentsGet200ResponseFromJSON,
    PledgeIdPaymentsGet200ResponseToJSON,
    PledgeIdWriteOffPost200ResponseFromJSON,
    PledgeIdWriteOffPost200ResponseToJSON,
} from '../models/index';

export interface PledgeGenerateInstallmentsGetRequest {
    pledgeAmount: number;
    installmentAmount: number;
    firstInstallmentDate: Date;
    frequency: PledgeGenerateInstallmentsGetFrequencyEnum;
    day1?: number;
    day2?: number;
}

export interface PledgeIdInstallmentsGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdPaymentFailuresGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdPaymentsGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface PledgeIdWriteOffPostRequest {
    id: number;
}

/**
 * 
 */
export class PledgesApi extends runtime.BaseAPI {

    /**
     * Returns a list of pledge installments for a given set of criteria. Note that this will not persist to the database, but these can be used as the PledgeInstallments property when creating or modifying a Pledge.
     */
    async pledgeGenerateInstallmentsGetRaw(requestParameters: PledgeGenerateInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PledgeGenerateInstallmentsGet200ResponseInner>>> {
        if (requestParameters['pledgeAmount'] == null) {
            throw new runtime.RequiredError(
                'pledgeAmount',
                'Required parameter "pledgeAmount" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['installmentAmount'] == null) {
            throw new runtime.RequiredError(
                'installmentAmount',
                'Required parameter "installmentAmount" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['firstInstallmentDate'] == null) {
            throw new runtime.RequiredError(
                'firstInstallmentDate',
                'Required parameter "firstInstallmentDate" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        if (requestParameters['frequency'] == null) {
            throw new runtime.RequiredError(
                'frequency',
                'Required parameter "frequency" was null or undefined when calling pledgeGenerateInstallmentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pledgeAmount'] != null) {
            queryParameters['pledgeAmount'] = requestParameters['pledgeAmount'];
        }

        if (requestParameters['installmentAmount'] != null) {
            queryParameters['installmentAmount'] = requestParameters['installmentAmount'];
        }

        if (requestParameters['firstInstallmentDate'] != null) {
            queryParameters['firstInstallmentDate'] = (requestParameters['firstInstallmentDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['day1'] != null) {
            queryParameters['day1'] = requestParameters['day1'];
        }

        if (requestParameters['day2'] != null) {
            queryParameters['day2'] = requestParameters['day2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/generateInstallments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PledgeGenerateInstallmentsGet200ResponseInnerFromJSON));
    }

    /**
     * Returns a list of pledge installments for a given set of criteria. Note that this will not persist to the database, but these can be used as the PledgeInstallments property when creating or modifying a Pledge.
     */
    async pledgeGenerateInstallmentsGet(requestParameters: PledgeGenerateInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PledgeGenerateInstallmentsGet200ResponseInner>> {
        const response = await this.pledgeGenerateInstallmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of pledge installments for a given pledge.
     */
    async pledgeIdInstallmentsGetRaw(requestParameters: PledgeIdInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdInstallmentsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdInstallmentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/installments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdInstallmentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of pledge installments for a given pledge.
     */
    async pledgeIdInstallmentsGet(requestParameters: PledgeIdInstallmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdInstallmentsGet200Response> {
        const response = await this.pledgeIdInstallmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of payment failures for the specified pledge
     */
    async pledgeIdPaymentFailuresGetRaw(requestParameters: PledgeIdPaymentFailuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdPaymentFailuresGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdPaymentFailuresGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/paymentFailures`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdPaymentFailuresGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of payment failures for the specified pledge
     */
    async pledgeIdPaymentFailuresGet(requestParameters: PledgeIdPaymentFailuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdPaymentFailuresGet200Response> {
        const response = await this.pledgeIdPaymentFailuresGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of successful payments for the specified pledge
     */
    async pledgeIdPaymentsGetRaw(requestParameters: PledgeIdPaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdPaymentsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdPaymentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/payments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdPaymentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of successful payments for the specified pledge
     */
    async pledgeIdPaymentsGet(requestParameters: PledgeIdPaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdPaymentsGet200Response> {
        const response = await this.pledgeIdPaymentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Writes off a pledge
     */
    async pledgeIdWriteOffPostRaw(requestParameters: PledgeIdWriteOffPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PledgeIdWriteOffPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pledgeIdWriteOffPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/pledge/{id}/writeOff`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PledgeIdWriteOffPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Writes off a pledge
     */
    async pledgeIdWriteOffPost(requestParameters: PledgeIdWriteOffPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PledgeIdWriteOffPost200Response> {
        const response = await this.pledgeIdWriteOffPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum PledgeGenerateInstallmentsGetFrequencyEnum {
    Weekly = 'Weekly',
    EveryOtherWeekly = 'EveryOtherWeekly',
    TwiceMonthly = 'TwiceMonthly',
    Monthly = 'Monthly',
    EveryOtherMonthly = 'EveryOtherMonthly',
    Quarterly = 'Quarterly',
    Yearly = 'Yearly',
    Custom = 'Custom'
}
