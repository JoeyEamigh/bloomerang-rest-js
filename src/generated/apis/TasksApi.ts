/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RelationshipIdDelete201Response,
  TaskIdPutRequest,
  TaskPostRequest,
  TasksGet200Response,
  TasksGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
    TaskIdPutRequestFromJSON,
    TaskIdPutRequestToJSON,
    TaskPostRequestFromJSON,
    TaskPostRequestToJSON,
    TasksGet200ResponseFromJSON,
    TasksGet200ResponseToJSON,
    TasksGet200ResponseAllOfResultsInnerFromJSON,
    TasksGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface TaskIdCompletePutRequest {
    id: number;
    saveAsInteraction?: boolean;
    completedDate?: Date;
}

export interface TaskIdDeleteRequest {
    id: number;
}

export interface TaskIdGetRequest {
    id: number;
}

export interface TaskIdPutOperationRequest {
    id: number;
    taskIdPutRequest: TaskIdPutRequest;
    sendNotifications?: boolean;
}

export interface TaskPostOperationRequest {
    taskPostRequest: TaskPostRequest;
    sendNotifications?: boolean;
}

export interface TasksGetRequest {
    skip?: number;
    take?: number;
    status?: Array<TasksGetStatusEnum>;
    minDueDate?: Date;
    maxDueDate?: Date;
    assignee?: Array<number>;
    channel?: Array<TasksGetChannelEnum>;
    purpose?: Array<TasksGetPurposeEnum>;
    constituent?: Array<number>;
    id?: Array<number>;
    orderBy?: TasksGetOrderByEnum;
    orderDirection?: TasksGetOrderDirectionEnum;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Completes a task.
     */
    async taskIdCompletePutRaw(requestParameters: TaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdCompletePut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['saveAsInteraction'] != null) {
            queryParameters['saveAsInteraction'] = requestParameters['saveAsInteraction'];
        }

        if (requestParameters['completedDate'] != null) {
            queryParameters['completedDate'] = (requestParameters['completedDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}/complete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Completes a task.
     */
    async taskIdCompletePut(requestParameters: TaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdCompletePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a task
     */
    async taskIdDeleteRaw(requestParameters: TaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a task
     */
    async taskIdDelete(requestParameters: TaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.taskIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a task by ID
     */
    async taskIdGetRaw(requestParameters: TaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a task by ID
     */
    async taskIdGet(requestParameters: TaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a task
     */
    async taskIdPutRaw(requestParameters: TaskIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskIdPut().'
            );
        }

        if (requestParameters['taskIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'taskIdPutRequest',
                'Required parameter "taskIdPutRequest" was null or undefined when calling taskIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sendNotifications'] != null) {
            queryParameters['sendNotifications'] = requestParameters['sendNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskIdPutRequestToJSON(requestParameters['taskIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Updates a task
     */
    async taskIdPut(requestParameters: TaskIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task
     */
    async taskPostRaw(requestParameters: TaskPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200ResponseAllOfResultsInner>> {
        if (requestParameters['taskPostRequest'] == null) {
            throw new runtime.RequiredError(
                'taskPostRequest',
                'Required parameter "taskPostRequest" was null or undefined when calling taskPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sendNotifications'] != null) {
            queryParameters['sendNotifications'] = requestParameters['sendNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskPostRequestToJSON(requestParameters['taskPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a task
     */
    async taskPost(requestParameters: TaskPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200ResponseAllOfResultsInner> {
        const response = await this.taskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of tasks.
     */
    async tasksGetRaw(requestParameters: TasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['minDueDate'] != null) {
            queryParameters['minDueDate'] = (requestParameters['minDueDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['maxDueDate'] != null) {
            queryParameters['maxDueDate'] = (requestParameters['maxDueDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['assignee'] != null) {
            queryParameters['assignee'] = requestParameters['assignee']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['purpose'] != null) {
            queryParameters['purpose'] = requestParameters['purpose']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tasks.
     */
    async tasksGet(requestParameters: TasksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksGet200Response> {
        const response = await this.tasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum TasksGetStatusEnum {
    Active = 'Active',
    Complete = 'Complete',
    Archived = 'Archived'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetOrderByEnum {
    CreatedDate = 'CreatedDate',
    Date = 'Date',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum TasksGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
