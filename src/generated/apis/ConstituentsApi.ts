/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConstituentDuplicatesGet200Response,
  ConstituentDuplicatesPostRequest,
  ConstituentIdPutRequest,
  ConstituentIdRelationshipsGet200Response,
  ConstituentIdTimelineGet200Response,
  ConstituentIdUpdateCommunicationSettingsPutRequest,
  ConstituentMergePostRequest,
  ConstituentPost200Response,
  ConstituentPostRequest,
  ConstituentsGet200Response,
  ConstituentsGet200ResponseAllOfResultsInner,
  ConstituentsSearchGet200Response,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    ConstituentDuplicatesGet200ResponseFromJSON,
    ConstituentDuplicatesGet200ResponseToJSON,
    ConstituentDuplicatesPostRequestFromJSON,
    ConstituentDuplicatesPostRequestToJSON,
    ConstituentIdPutRequestFromJSON,
    ConstituentIdPutRequestToJSON,
    ConstituentIdRelationshipsGet200ResponseFromJSON,
    ConstituentIdRelationshipsGet200ResponseToJSON,
    ConstituentIdTimelineGet200ResponseFromJSON,
    ConstituentIdTimelineGet200ResponseToJSON,
    ConstituentIdUpdateCommunicationSettingsPutRequestFromJSON,
    ConstituentIdUpdateCommunicationSettingsPutRequestToJSON,
    ConstituentMergePostRequestFromJSON,
    ConstituentMergePostRequestToJSON,
    ConstituentPost200ResponseFromJSON,
    ConstituentPost200ResponseToJSON,
    ConstituentPostRequestFromJSON,
    ConstituentPostRequestToJSON,
    ConstituentsGet200ResponseFromJSON,
    ConstituentsGet200ResponseToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerToJSON,
    ConstituentsSearchGet200ResponseFromJSON,
    ConstituentsSearchGet200ResponseToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface ConstituentDuplicatesGetRequest {
    firstName?: string;
    lastName?: string;
    organizationName?: string;
    street?: string;
    phoneNumber?: string;
    emailAddress?: string;
    type?: string;
}

export interface ConstituentDuplicatesPostOperationRequest {
    constituentDuplicatesPostRequest: ConstituentDuplicatesPostRequest;
}

export interface ConstituentIdDeleteRequest {
    id: number;
}

export interface ConstituentIdGetRequest {
    id: number;
}

export interface ConstituentIdPutOperationRequest {
    id: number;
    constituentIdPutRequest: ConstituentIdPutRequest;
}

export interface ConstituentIdRelationshipsGetRequest {
    id: number;
    skip?: number;
    take?: number;
    lastModified?: Date;
}

export interface ConstituentIdTimelineGetRequest {
    id: number;
    skip?: number;
    take?: number;
}

export interface ConstituentIdUpdateCommunicationSettingsPutOperationRequest {
    id: number;
    constituentIdUpdateCommunicationSettingsPutRequest: ConstituentIdUpdateCommunicationSettingsPutRequest;
}

export interface ConstituentMergePostOperationRequest {
    constituentMergePostRequest: ConstituentMergePostRequest;
}

export interface ConstituentPostOperationRequest {
    constituentPostRequest: ConstituentPostRequest;
}

export interface ConstituentsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    isFavorite?: boolean;
    type?: ConstituentsGetTypeEnum;
    id?: Array<number>;
    orderBy?: ConstituentsGetOrderByEnum;
    orderDirection?: ConstituentsGetOrderDirectionEnum;
    customFieldId?: number;
    customFieldValue?: string;
}

export interface ConstituentsSearchGetRequest {
    skip?: number;
    take?: number;
    search?: string;
    type?: ConstituentsSearchGetTypeEnum;
}

/**
 * 
 */
export class ConstituentsApi extends runtime.BaseAPI {

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesGetRaw(requestParameters: ConstituentDuplicatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentDuplicatesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organizationName'] = requestParameters['organizationName'];
        }

        if (requestParameters['street'] != null) {
            queryParameters['street'] = requestParameters['street'];
        }

        if (requestParameters['phoneNumber'] != null) {
            queryParameters['phoneNumber'] = requestParameters['phoneNumber'];
        }

        if (requestParameters['emailAddress'] != null) {
            queryParameters['emailAddress'] = requestParameters['emailAddress'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/duplicates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentDuplicatesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesGet(requestParameters: ConstituentDuplicatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentDuplicatesGet200Response> {
        const response = await this.constituentDuplicatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesPostRaw(requestParameters: ConstituentDuplicatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentDuplicatesGet200Response>> {
        if (requestParameters['constituentDuplicatesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentDuplicatesPostRequest',
                'Required parameter "constituentDuplicatesPostRequest" was null or undefined when calling constituentDuplicatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/duplicates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentDuplicatesPostRequestToJSON(requestParameters['constituentDuplicatesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentDuplicatesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * When searching for duplicates, a name match and one piece of matching contact information is required for an existing constituent to be considered a duplicate.  Accordingly, you must supply either firstName and lastName (for individuals) or organizationName (for organizations). You must also supply at least street, phoneNumber, or emailAddress.
     * Searches for possible duplicate constituents.
     */
    async constituentDuplicatesPost(requestParameters: ConstituentDuplicatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentDuplicatesGet200Response> {
        const response = await this.constituentDuplicatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a constituent
     */
    async constituentIdDeleteRaw(requestParameters: ConstituentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a constituent
     */
    async constituentIdDelete(requestParameters: ConstituentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.constituentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a constituent by ID
     */
    async constituentIdGetRaw(requestParameters: ConstituentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a constituent by ID
     */
    async constituentIdGet(requestParameters: ConstituentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInner> {
        const response = await this.constituentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a constituent
     */
    async constituentIdPutRaw(requestParameters: ConstituentIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdPut().'
            );
        }

        if (requestParameters['constituentIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentIdPutRequest',
                'Required parameter "constituentIdPutRequest" was null or undefined when calling constituentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentIdPutRequestToJSON(requestParameters['constituentIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a constituent
     */
    async constituentIdPut(requestParameters: ConstituentIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all Relationships for the specified constituent.
     */
    async constituentIdRelationshipsGetRaw(requestParameters: ConstituentIdRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentIdRelationshipsGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdRelationshipsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/relationships`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentIdRelationshipsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets all Relationships for the specified constituent.
     */
    async constituentIdRelationshipsGet(requestParameters: ConstituentIdRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentIdRelationshipsGet200Response> {
        const response = await this.constituentIdRelationshipsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves TimelineEntrySummary for the Constituent or all members of a Household (if Household ID is passed in). Excludes transactions the user didn’t create if the user only has access to view transactions they create.
     */
    async constituentIdTimelineGetRaw(requestParameters: ConstituentIdTimelineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentIdTimelineGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdTimelineGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/timeline`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentIdTimelineGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves TimelineEntrySummary for the Constituent or all members of a Household (if Household ID is passed in). Excludes transactions the user didn’t create if the user only has access to view transactions they create.
     */
    async constituentIdTimelineGet(requestParameters: ConstituentIdTimelineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentIdTimelineGet200Response> {
        const response = await this.constituentIdTimelineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the communication settings for a constituent
     */
    async constituentIdUpdateCommunicationSettingsPutRaw(requestParameters: ConstituentIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling constituentIdUpdateCommunicationSettingsPut().'
            );
        }

        if (requestParameters['constituentIdUpdateCommunicationSettingsPutRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentIdUpdateCommunicationSettingsPutRequest',
                'Required parameter "constituentIdUpdateCommunicationSettingsPutRequest" was null or undefined when calling constituentIdUpdateCommunicationSettingsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/{id}/updateCommunicationSettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentIdUpdateCommunicationSettingsPutRequestToJSON(requestParameters['constituentIdUpdateCommunicationSettingsPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the communication settings for a constituent
     */
    async constituentIdUpdateCommunicationSettingsPut(requestParameters: ConstituentIdUpdateCommunicationSettingsPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentIdUpdateCommunicationSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When merging, the database will look for a possible duplicate defined as a name plus one piece of contact info (address, email, or phone). If a duplicate is found, the data passed in will be merged into an existing constituent. If no duplicate is found, a new constituent will be created.  Note that this endpoint does not accept SecondaryAddresses, SecondaryEmails, or SecondaryPhones and you will receive an exception if you pass those in..
     * Creates a new constituent or merges data with an existing constituent
     */
    async constituentMergePostRaw(requestParameters: ConstituentMergePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['constituentMergePostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentMergePostRequest',
                'Required parameter "constituentMergePostRequest" was null or undefined when calling constituentMergePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentMergePostRequestToJSON(requestParameters['constituentMergePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * When merging, the database will look for a possible duplicate defined as a name plus one piece of contact info (address, email, or phone). If a duplicate is found, the data passed in will be merged into an existing constituent. If no duplicate is found, a new constituent will be created.  Note that this endpoint does not accept SecondaryAddresses, SecondaryEmails, or SecondaryPhones and you will receive an exception if you pass those in..
     * Creates a new constituent or merges data with an existing constituent
     */
    async constituentMergePost(requestParameters: ConstituentMergePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentMergePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a constituent
     */
    async constituentPostRaw(requestParameters: ConstituentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentPost200Response>> {
        if (requestParameters['constituentPostRequest'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequest',
                'Required parameter "constituentPostRequest" was null or undefined when calling constituentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestToJSON(requestParameters['constituentPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a constituent
     */
    async constituentPost(requestParameters: ConstituentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentPost200Response> {
        const response = await this.constituentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of constituents
     */
    async constituentsGetRaw(requestParameters: ConstituentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['isFavorite'] != null) {
            queryParameters['isFavorite'] = requestParameters['isFavorite'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['customFieldId'] != null) {
            queryParameters['customFieldId'] = requestParameters['customFieldId'];
        }

        if (requestParameters['customFieldValue'] != null) {
            queryParameters['customFieldValue'] = requestParameters['customFieldValue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of constituents
     */
    async constituentsGet(requestParameters: ConstituentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200Response> {
        const response = await this.constituentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for constituents and households
     */
    async constituentsSearchGetRaw(requestParameters: ConstituentsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsSearchGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/constituents/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsSearchGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Searches for constituents and households
     */
    async constituentsSearchGet(requestParameters: ConstituentsSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsSearchGet200Response> {
        const response = await this.constituentsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetTypeEnum {
    Individual = 'Individual',
    Organization = 'Organization'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetOrderByEnum {
    Id = 'Id',
    CreatedDate = 'CreatedDate',
    LastModifiedDate = 'LastModifiedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsGetOrderDirectionEnum {
    Asc = 'Asc',
    Desc = 'Desc'
}
/**
  * @export
  * @enum {string}
  */
export enum ConstituentsSearchGetTypeEnum {
    Individual = 'Individual',
    Organization = 'Organization',
    Household = 'Household'
}
