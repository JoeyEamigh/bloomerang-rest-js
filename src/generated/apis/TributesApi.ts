/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TributeIdPutRequest,
  TributePostRequest,
  TributesGet200Response,
  TributesGet200ResponseAllOfResultsInner,
} from '../models/index';
import {
    TributeIdPutRequestFromJSON,
    TributeIdPutRequestToJSON,
    TributePostRequestFromJSON,
    TributePostRequestToJSON,
    TributesGet200ResponseFromJSON,
    TributesGet200ResponseToJSON,
    TributesGet200ResponseAllOfResultsInnerFromJSON,
    TributesGet200ResponseAllOfResultsInnerToJSON,
} from '../models/index';

export interface TributeIdGetRequest {
    id: number;
}

export interface TributeIdPutOperationRequest {
    id: number;
    tributeIdPutRequest: TributeIdPutRequest;
}

export interface TributePostOperationRequest {
    tributePostRequest: TributePostRequest;
}

export interface TributesGetRequest {
    skip?: number;
    take?: number;
    id?: Array<number>;
    isActive?: boolean;
}

export interface TributesSearchGetRequest {
    skip?: number;
    take?: number;
    search?: string;
}

/**
 * 
 */
export class TributesApi extends runtime.BaseAPI {

    /**
     * Gets a tribute by ID
     */
    async tributeIdGetRaw(requestParameters: TributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tributeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Gets a tribute by ID
     */
    async tributeIdGet(requestParameters: TributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edits a tribute
     */
    async tributeIdPutRaw(requestParameters: TributeIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tributeIdPut().'
            );
        }

        if (requestParameters['tributeIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'tributeIdPutRequest',
                'Required parameter "tributeIdPutRequest" was null or undefined when calling tributeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TributeIdPutRequestToJSON(requestParameters['tributeIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Edits a tribute
     */
    async tributeIdPut(requestParameters: TributeIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a tribute
     */
    async tributePostRaw(requestParameters: TributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200ResponseAllOfResultsInner>> {
        if (requestParameters['tributePostRequest'] == null) {
            throw new runtime.RequiredError(
                'tributePostRequest',
                'Required parameter "tributePostRequest" was null or undefined when calling tributePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TributePostRequestToJSON(requestParameters['tributePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseAllOfResultsInnerFromJSON(jsonValue));
    }

    /**
     * Creates a tribute
     */
    async tributePost(requestParameters: TributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200ResponseAllOfResultsInner> {
        const response = await this.tributePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of tributes
     */
    async tributesGetRaw(requestParameters: TributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tributes
     */
    async tributesGet(requestParameters: TributesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200Response> {
        const response = await this.tributesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for active tributes
     */
    async tributesSearchGetRaw(requestParameters: TributesSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TributesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tributes/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TributesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Searches for active tributes
     */
    async tributesSearchGet(requestParameters: TributesSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TributesGet200Response> {
        const response = await this.tributesSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
