/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConstituentPostRequestAllOfAllOfSecondaryEmailsInner,
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail,
  EmailPostRequest,
  EmailsGet200Response,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerFromJSON,
    ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailToJSON,
    EmailPostRequestFromJSON,
    EmailPostRequestToJSON,
    EmailsGet200ResponseFromJSON,
    EmailsGet200ResponseToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface EmailIdDeleteRequest {
    id: number;
}

export interface EmailIdGetRequest {
    id: number;
}

export interface EmailIdPutRequest {
    id: number;
    constituentPostRequestAllOfAllOfSecondaryEmailsInner: ConstituentPostRequestAllOfAllOfSecondaryEmailsInner;
}

export interface EmailPostOperationRequest {
    emailPostRequest: EmailPostRequest;
}

export interface EmailsGetRequest {
    skip?: number;
    take?: number;
    lastModified?: Date;
    constituent?: Array<number>;
    id?: Array<number>;
}

/**
 * 
 */
export class EmailAddressesApi extends runtime.BaseAPI {

    /**
     * Deletes an email address
     */
    async emailIdDeleteRaw(requestParameters: EmailIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an email address
     */
    async emailIdDelete(requestParameters: EmailIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.emailIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an email address by ID
     */
    async emailIdGetRaw(requestParameters: EmailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Gets an email address by ID
     */
    async emailIdGet(requestParameters: EmailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an email address
     */
    async emailIdPutRaw(requestParameters: EmailIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailIdPut().'
            );
        }

        if (requestParameters['constituentPostRequestAllOfAllOfSecondaryEmailsInner'] == null) {
            throw new runtime.RequiredError(
                'constituentPostRequestAllOfAllOfSecondaryEmailsInner',
                'Required parameter "constituentPostRequestAllOfAllOfSecondaryEmailsInner" was null or undefined when calling emailIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentPostRequestAllOfAllOfSecondaryEmailsInnerToJSON(requestParameters['constituentPostRequestAllOfAllOfSecondaryEmailsInner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Updates an email address
     */
    async emailIdPut(requestParameters: EmailIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an email address
     */
    async emailPostRaw(requestParameters: EmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail>> {
        if (requestParameters['emailPostRequest'] == null) {
            throw new runtime.RequiredError(
                'emailPostRequest',
                'Required parameter "emailPostRequest" was null or undefined when calling emailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailPostRequestToJSON(requestParameters['emailPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmailFromJSON(jsonValue));
    }

    /**
     * Creates an email address
     */
    async emailPost(requestParameters: EmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryEmail> {
        const response = await this.emailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of email addresses.
     */
    async emailsGetRaw(requestParameters: EmailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = (requestParameters['lastModified'] as any).toISOString();
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of email addresses.
     */
    async emailsGet(requestParameters: EmailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailsGet200Response> {
        const response = await this.emailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
