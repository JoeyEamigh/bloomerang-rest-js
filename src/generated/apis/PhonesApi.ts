/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone,
  PhonePostRequest,
  PhonesGet200Response,
  RelationshipIdDelete201Response,
} from '../models/index';
import {
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneToJSON,
    PhonePostRequestFromJSON,
    PhonePostRequestToJSON,
    PhonesGet200ResponseFromJSON,
    PhonesGet200ResponseToJSON,
    RelationshipIdDelete201ResponseFromJSON,
    RelationshipIdDelete201ResponseToJSON,
} from '../models/index';

export interface PhoneIdDeleteRequest {
    id: number;
}

export interface PhoneIdGetRequest {
    id: number;
}

export interface PhoneIdPutRequest {
    id: number;
    constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone: ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone;
}

export interface PhonePostOperationRequest {
    phonePostRequest: PhonePostRequest;
}

export interface PhonesGetRequest {
    skip?: number;
    take?: number;
    constituent?: Array<number>;
    id?: Array<number>;
}

/**
 * 
 */
export class PhonesApi extends runtime.BaseAPI {

    /**
     * Deletes a phone
     */
    async phoneIdDeleteRaw(requestParameters: PhoneIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipIdDelete201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipIdDelete201ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a phone
     */
    async phoneIdDelete(requestParameters: PhoneIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipIdDelete201Response> {
        const response = await this.phoneIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a phone by ID
     */
    async phoneIdGetRaw(requestParameters: PhoneIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Gets a phone by ID
     */
    async phoneIdGet(requestParameters: PhoneIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phoneIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a phone
     */
    async phoneIdPutRaw(requestParameters: PhoneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling phoneIdPut().'
            );
        }

        if (requestParameters['constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone'] == null) {
            throw new runtime.RequiredError(
                'constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone',
                'Required parameter "constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone" was null or undefined when calling phoneIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneToJSON(requestParameters['constituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Updates a phone
     */
    async phoneIdPut(requestParameters: PhoneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phoneIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a phone
     */
    async phonePostRaw(requestParameters: PhonePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone>> {
        if (requestParameters['phonePostRequest'] == null) {
            throw new runtime.RequiredError(
                'phonePostRequest',
                'Required parameter "phonePostRequest" was null or undefined when calling phonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhonePostRequestToJSON(requestParameters['phonePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhoneFromJSON(jsonValue));
    }

    /**
     * Creates a phone
     */
    async phonePost(requestParameters: PhonePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfPrimaryPhone> {
        const response = await this.phonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of phones.
     */
    async phonesGetRaw(requestParameters: PhonesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhonesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['constituent'] != null) {
            queryParameters['constituent'] = requestParameters['constituent']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id']!.join(runtime.COLLECTION_FORMATS["pipes"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/phones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhonesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of phones.
     */
    async phonesGet(requestParameters: PhonesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhonesGet200Response> {
        const response = await this.phonesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
