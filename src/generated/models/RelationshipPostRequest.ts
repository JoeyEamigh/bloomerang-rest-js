/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RelationshipPostRequest
 */
export interface RelationshipPostRequest {
    /**
     * 
     * @type {number}
     * @memberof RelationshipPostRequest
     */
    relationshipRoleId1: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipPostRequest
     */
    relationshipRoleId2: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipPostRequest
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipPostRequest
     */
    accountId1: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipPostRequest
     */
    accountId2: number;
    /**
     * 
     * @type {string}
     * @memberof RelationshipPostRequest
     */
    note?: string;
}

/**
 * Check if a given object implements the RelationshipPostRequest interface.
 */
export function instanceOfRelationshipPostRequest(value: object): value is RelationshipPostRequest {
    if (!('relationshipRoleId1' in value) || value['relationshipRoleId1'] === undefined) return false;
    if (!('relationshipRoleId2' in value) || value['relationshipRoleId2'] === undefined) return false;
    if (!('accountId1' in value) || value['accountId1'] === undefined) return false;
    if (!('accountId2' in value) || value['accountId2'] === undefined) return false;
    return true;
}

export function RelationshipPostRequestFromJSON(json: any): RelationshipPostRequest {
    return RelationshipPostRequestFromJSONTyped(json, false);
}

export function RelationshipPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationshipPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'relationshipRoleId1': json['RelationshipRoleId1'],
        'relationshipRoleId2': json['RelationshipRoleId2'],
        'id': json['Id'] == null ? undefined : json['Id'],
        'accountId1': json['AccountId1'],
        'accountId2': json['AccountId2'],
        'note': json['Note'] == null ? undefined : json['Note'],
    };
}

export function RelationshipPostRequestToJSON(json: any): RelationshipPostRequest {
    return RelationshipPostRequestToJSONTyped(json, false);
}

export function RelationshipPostRequestToJSONTyped(value?: RelationshipPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'RelationshipRoleId1': value['relationshipRoleId1'],
        'RelationshipRoleId2': value['relationshipRoleId2'],
        'Id': value['id'],
        'AccountId1': value['accountId1'],
        'AccountId2': value['accountId2'],
        'Note': value['note'],
    };
}

export const RelationshipPostRequestPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

