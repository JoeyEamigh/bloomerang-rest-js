/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PledgeUpdateModelAllOfPledgeInstallments } from './PledgeUpdateModelAllOfPledgeInstallments';
import {
    PledgeUpdateModelAllOfPledgeInstallmentsFromJSON,
    PledgeUpdateModelAllOfPledgeInstallmentsFromJSONTyped,
    PledgeUpdateModelAllOfPledgeInstallmentsToJSON,
    PledgeUpdateModelAllOfPledgeInstallmentsToJSONTyped,
} from './PledgeUpdateModelAllOfPledgeInstallments';
import type { PledgeUpdateModelAllOfCustomValues } from './PledgeUpdateModelAllOfCustomValues';
import {
    PledgeUpdateModelAllOfCustomValuesFromJSON,
    PledgeUpdateModelAllOfCustomValuesFromJSONTyped,
    PledgeUpdateModelAllOfCustomValuesToJSON,
    PledgeUpdateModelAllOfCustomValuesToJSONTyped,
} from './PledgeUpdateModelAllOfCustomValues';
import type { PledgeUpdateModelAllOfSoftCredits } from './PledgeUpdateModelAllOfSoftCredits';
import {
    PledgeUpdateModelAllOfSoftCreditsFromJSON,
    PledgeUpdateModelAllOfSoftCreditsFromJSONTyped,
    PledgeUpdateModelAllOfSoftCreditsToJSON,
    PledgeUpdateModelAllOfSoftCreditsToJSONTyped,
} from './PledgeUpdateModelAllOfSoftCredits';
import type { PledgeUpdateModelAllOfAttachments } from './PledgeUpdateModelAllOfAttachments';
import {
    PledgeUpdateModelAllOfAttachmentsFromJSON,
    PledgeUpdateModelAllOfAttachmentsFromJSONTyped,
    PledgeUpdateModelAllOfAttachmentsToJSON,
    PledgeUpdateModelAllOfAttachmentsToJSONTyped,
} from './PledgeUpdateModelAllOfAttachments';

/**
 * 
 * @export
 * @interface PledgeUpdateModel
 */
export interface PledgeUpdateModel {
    /**
     * The ID of the pledge used in the API (not to be confused with DesignationNumber)
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof PledgeUpdateModel
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof PledgeUpdateModel
     */
    acknowledgementStatus?: PledgeUpdateModelAcknowledgementStatusEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof PledgeUpdateModel
     */
    acknowledgementInteractionIds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PledgeUpdateModel
     */
    pledgeFrequency?: PledgeUpdateModelPledgeFrequencyEnum;
    /**
     * 
     * @type {Array<PledgeUpdateModelAllOfPledgeInstallments>}
     * @memberof PledgeUpdateModel
     */
    pledgeInstallments?: Array<PledgeUpdateModelAllOfPledgeInstallments>;
    /**
     * 
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    nonDeductibleAmount?: number;
    /**
     * The ID of the fund for this pledge
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    fundId?: number;
    /**
     * The ID of the quickbooks account for this pledge
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    quickbooksAccountId?: number;
    /**
     * The ID of the campaign for this pledge
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    campaignId?: number;
    /**
     * The ID of the appeal for this pledge
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    appealId?: number;
    /**
     * The ID of the tribute for this pledge
     * @type {number}
     * @memberof PledgeUpdateModel
     */
    tributeId?: number;
    /**
     * 
     * @type {Array<PledgeUpdateModelAllOfSoftCredits>}
     * @memberof PledgeUpdateModel
     */
    softCredits?: Array<PledgeUpdateModelAllOfSoftCredits>;
    /**
     * 
     * @type {Array<PledgeUpdateModelAllOfCustomValues>}
     * @memberof PledgeUpdateModel
     */
    customValues?: Array<PledgeUpdateModelAllOfCustomValues>;
    /**
     * 
     * @type {Array<PledgeUpdateModelAllOfAttachments>}
     * @memberof PledgeUpdateModel
     */
    attachments?: Array<PledgeUpdateModelAllOfAttachments>;
}

/**
* @export
* @enum {string}
*/
export enum PledgeUpdateModelAcknowledgementStatusEnum {
    Yes = 'Yes',
    No = 'No',
    DoNotAcknowledge = 'DoNotAcknowledge'
}
/**
* @export
* @enum {string}
*/
export enum PledgeUpdateModelPledgeFrequencyEnum {
    Weekly = 'Weekly',
    EveryOtherWeekly = 'EveryOtherWeekly',
    TwiceMonthly = 'TwiceMonthly',
    Monthly = 'Monthly',
    EveryOtherMonthly = 'EveryOtherMonthly',
    Quarterly = 'Quarterly',
    Yearly = 'Yearly',
    Custom = 'Custom'
}


/**
 * Check if a given object implements the PledgeUpdateModel interface.
 */
export function instanceOfPledgeUpdateModel(value: object): value is PledgeUpdateModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function PledgeUpdateModelFromJSON(json: any): PledgeUpdateModel {
    return PledgeUpdateModelFromJSONTyped(json, false);
}

export function PledgeUpdateModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PledgeUpdateModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'amount': json['Amount'] == null ? undefined : json['Amount'],
        'note': json['Note'] == null ? undefined : json['Note'],
        'acknowledgementStatus': json['AcknowledgementStatus'] == null ? undefined : json['AcknowledgementStatus'],
        'acknowledgementInteractionIds': json['AcknowledgementInteractionIds'] == null ? undefined : json['AcknowledgementInteractionIds'],
        'pledgeFrequency': json['PledgeFrequency'] == null ? undefined : json['PledgeFrequency'],
        'pledgeInstallments': json['PledgeInstallments'] == null ? undefined : ((json['PledgeInstallments'] as Array<any>).map(PledgeUpdateModelAllOfPledgeInstallmentsFromJSON)),
        'nonDeductibleAmount': json['NonDeductibleAmount'] == null ? undefined : json['NonDeductibleAmount'],
        'fundId': json['FundId'] == null ? undefined : json['FundId'],
        'quickbooksAccountId': json['QuickbooksAccountId'] == null ? undefined : json['QuickbooksAccountId'],
        'campaignId': json['CampaignId'] == null ? undefined : json['CampaignId'],
        'appealId': json['AppealId'] == null ? undefined : json['AppealId'],
        'tributeId': json['TributeId'] == null ? undefined : json['TributeId'],
        'softCredits': json['SoftCredits'] == null ? undefined : ((json['SoftCredits'] as Array<any>).map(PledgeUpdateModelAllOfSoftCreditsFromJSON)),
        'customValues': json['CustomValues'] == null ? undefined : ((json['CustomValues'] as Array<any>).map(PledgeUpdateModelAllOfCustomValuesFromJSON)),
        'attachments': json['Attachments'] == null ? undefined : ((json['Attachments'] as Array<any>).map(PledgeUpdateModelAllOfAttachmentsFromJSON)),
    };
}

export function PledgeUpdateModelToJSON(json: any): PledgeUpdateModel {
    return PledgeUpdateModelToJSONTyped(json, false);
}

export function PledgeUpdateModelToJSONTyped(value?: PledgeUpdateModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Amount': value['amount'],
        'Note': value['note'],
        'AcknowledgementStatus': value['acknowledgementStatus'],
        'AcknowledgementInteractionIds': value['acknowledgementInteractionIds'],
        'PledgeFrequency': value['pledgeFrequency'],
        'PledgeInstallments': value['pledgeInstallments'] == null ? undefined : ((value['pledgeInstallments'] as Array<any>).map(PledgeUpdateModelAllOfPledgeInstallmentsToJSON)),
        'NonDeductibleAmount': value['nonDeductibleAmount'],
        'FundId': value['fundId'],
        'QuickbooksAccountId': value['quickbooksAccountId'],
        'CampaignId': value['campaignId'],
        'AppealId': value['appealId'],
        'TributeId': value['tributeId'],
        'SoftCredits': value['softCredits'] == null ? undefined : ((value['softCredits'] as Array<any>).map(PledgeUpdateModelAllOfSoftCreditsToJSON)),
        'CustomValues': value['customValues'] == null ? undefined : ((value['customValues'] as Array<any>).map(PledgeUpdateModelAllOfCustomValuesToJSON)),
        'Attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(PledgeUpdateModelAllOfAttachmentsToJSON)),
    };
}

export const PledgeUpdateModelPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

