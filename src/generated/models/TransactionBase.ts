/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionBase
 */
export interface TransactionBase {
    /**
     * The ID of the constituent used in the API (not to be confused with accountNumber)
     * @type {number}
     * @memberof TransactionBase
     */
    accountId?: number;
    /**
     * 
     * @type {Date}
     * @memberof TransactionBase
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof TransactionBase
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    method?: TransactionBaseMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    entryMethod?: TransactionBaseEntryMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    methodOrigin?: TransactionBaseMethodOriginEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    checkNumber?: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionBase
     */
    checkDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    creditCardType?: TransactionBaseCreditCardTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    creditCardLastFourDigits?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionBase
     */
    creditCardExpMonth?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionBase
     */
    creditCardExpYear?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    eftAccountType?: TransactionBaseEftAccountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    eftLastFourDigits?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    eftRoutingNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    inKindDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionBase
     */
    inKindType?: TransactionBaseInKindTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TransactionBase
     */
    inKindMarketValue?: number;
}

/**
* @export
* @enum {string}
*/
export enum TransactionBaseMethodEnum {
    None = 'None',
    Cash = 'Cash',
    Check = 'Check',
    CreditCard = 'CreditCard',
    Eft = 'Eft',
    InKind = 'InKind',
    ApplePay = 'ApplePay',
    GooglePay = 'GooglePay',
    PayPal = 'PayPal',
    Venmo = 'Venmo'
}
/**
* @export
* @enum {string}
*/
export enum TransactionBaseEntryMethodEnum {
    Tap = 'Tap',
    Manual = 'Manual',
    Insert = 'Insert',
    ExistingWalletItem = 'ExistingWalletItem',
    AutoProcessed = 'AutoProcessed'
}
/**
* @export
* @enum {string}
*/
export enum TransactionBaseMethodOriginEnum {
    Forms = 'Forms',
    Mobile = 'Mobile',
    Crm = 'CRM'
}
/**
* @export
* @enum {string}
*/
export enum TransactionBaseCreditCardTypeEnum {
    Visa = 'Visa',
    MasterCard = 'MasterCard',
    Discover = 'Discover',
    AmericanExpress = 'AmericanExpress',
    DinersClub = 'DinersClub',
    Jcb = 'JCB'
}
/**
* @export
* @enum {string}
*/
export enum TransactionBaseEftAccountTypeEnum {
    Checking = 'Checking',
    Savings = 'Savings'
}
/**
* @export
* @enum {string}
*/
export enum TransactionBaseInKindTypeEnum {
    Goods = 'Goods',
    Services = 'Services'
}


/**
 * Check if a given object implements the TransactionBase interface.
 */
export function instanceOfTransactionBase(value: object): value is TransactionBase {
    return true;
}

export function TransactionBaseFromJSON(json: any): TransactionBase {
    return TransactionBaseFromJSONTyped(json, false);
}

export function TransactionBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionBase {
    if (json == null) {
        return json;
    }
    return {
        
        'accountId': json['AccountId'] == null ? undefined : json['AccountId'],
        'date': json['Date'] == null ? undefined : (new Date(json['Date'])),
        'amount': json['Amount'] == null ? undefined : json['Amount'],
        'method': json['Method'] == null ? undefined : json['Method'],
        'entryMethod': json['EntryMethod'] == null ? undefined : json['EntryMethod'],
        'methodOrigin': json['MethodOrigin'] == null ? undefined : json['MethodOrigin'],
        'checkNumber': json['CheckNumber'] == null ? undefined : json['CheckNumber'],
        'checkDate': json['CheckDate'] == null ? undefined : (new Date(json['CheckDate'])),
        'creditCardType': json['CreditCardType'] == null ? undefined : json['CreditCardType'],
        'creditCardLastFourDigits': json['CreditCardLastFourDigits'] == null ? undefined : json['CreditCardLastFourDigits'],
        'creditCardExpMonth': json['CreditCardExpMonth'] == null ? undefined : json['CreditCardExpMonth'],
        'creditCardExpYear': json['CreditCardExpYear'] == null ? undefined : json['CreditCardExpYear'],
        'eftAccountType': json['EftAccountType'] == null ? undefined : json['EftAccountType'],
        'eftLastFourDigits': json['EftLastFourDigits'] == null ? undefined : json['EftLastFourDigits'],
        'eftRoutingNumber': json['EftRoutingNumber'] == null ? undefined : json['EftRoutingNumber'],
        'inKindDescription': json['InKindDescription'] == null ? undefined : json['InKindDescription'],
        'inKindType': json['InKindType'] == null ? undefined : json['InKindType'],
        'inKindMarketValue': json['InKindMarketValue'] == null ? undefined : json['InKindMarketValue'],
    };
}

export function TransactionBaseToJSON(json: any): TransactionBase {
    return TransactionBaseToJSONTyped(json, false);
}

export function TransactionBaseToJSONTyped(value?: TransactionBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'AccountId': value['accountId'],
        'Date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'Amount': value['amount'],
        'Method': value['method'],
        'EntryMethod': value['entryMethod'],
        'MethodOrigin': value['methodOrigin'],
        'CheckNumber': value['checkNumber'],
        'CheckDate': value['checkDate'] == null ? undefined : ((value['checkDate']).toISOString().substring(0,10)),
        'CreditCardType': value['creditCardType'],
        'CreditCardLastFourDigits': value['creditCardLastFourDigits'],
        'CreditCardExpMonth': value['creditCardExpMonth'],
        'CreditCardExpYear': value['creditCardExpYear'],
        'EftAccountType': value['eftAccountType'],
        'EftLastFourDigits': value['eftLastFourDigits'],
        'EftRoutingNumber': value['eftRoutingNumber'],
        'InKindDescription': value['inKindDescription'],
        'InKindType': value['inKindType'],
        'InKindMarketValue': value['inKindMarketValue'],
    };
}

export const TransactionBasePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

