/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseGet200Response
 */
export interface DatabaseGet200Response {
    /**
     * Internal Bloomerang database ID
     * @type {string}
     * @memberof DatabaseGet200Response
     */
    id?: string;
    /**
     * Organization name
     * @type {string}
     * @memberof DatabaseGet200Response
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseGet200Response
     */
    flavor?: DatabaseGet200ResponseFlavorEnum;
    /**
     * 
     * @type {string}
     * @memberof DatabaseGet200Response
     */
    baseLicenseProvider?: DatabaseGet200ResponseBaseLicenseProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof DatabaseGet200Response
     */
    accountingIntegration?: DatabaseGet200ResponseAccountingIntegrationEnum;
}

/**
* @export
* @enum {string}
*/
export enum DatabaseGet200ResponseFlavorEnum {
    Customer = 'Customer',
    Conversions = 'Conversions',
    Demo = 'Demo'
}
/**
* @export
* @enum {string}
*/
export enum DatabaseGet200ResponseBaseLicenseProviderEnum {
    Bloomerang = 'Bloomerang',
    Firespring = 'Firespring',
    Benevon = 'Benevon'
}
/**
* @export
* @enum {string}
*/
export enum DatabaseGet200ResponseAccountingIntegrationEnum {
    Aplos = 'Aplos',
    QuickBooksDesktop = 'QuickBooks Desktop',
    QuickBooksOnline = 'QuickBooks Online',
    None = 'None'
}


/**
 * Check if a given object implements the DatabaseGet200Response interface.
 */
export function instanceOfDatabaseGet200Response(value: object): value is DatabaseGet200Response {
    return true;
}

export function DatabaseGet200ResponseFromJSON(json: any): DatabaseGet200Response {
    return DatabaseGet200ResponseFromJSONTyped(json, false);
}

export function DatabaseGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseGet200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'] == null ? undefined : json['Id'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'flavor': json['Flavor'] == null ? undefined : json['Flavor'],
        'baseLicenseProvider': json['BaseLicenseProvider'] == null ? undefined : json['BaseLicenseProvider'],
        'accountingIntegration': json['AccountingIntegration'] == null ? undefined : json['AccountingIntegration'],
    };
}

export function DatabaseGet200ResponseToJSON(json: any): DatabaseGet200Response {
    return DatabaseGet200ResponseToJSONTyped(json, false);
}

export function DatabaseGet200ResponseToJSONTyped(value?: DatabaseGet200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Name': value['name'],
        'Flavor': value['flavor'],
        'BaseLicenseProvider': value['baseLicenseProvider'],
        'AccountingIntegration': value['accountingIntegration'],
    };
}

export const DatabaseGet200ResponsePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

