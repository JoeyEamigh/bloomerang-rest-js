/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TributeBase
 */
export interface TributeBase {
    /**
     * 
     * @type {string}
     * @memberof TributeBase
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof TributeBase
     */
    tributeType?: TributeBaseTributeTypeEnum;
    /**
     * The IDs of all notificants (constituents) associated with this tribute
     * @type {Array<number>}
     * @memberof TributeBase
     */
    notificantAccountIds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof TributeBase
     */
    name?: string;
    /**
     * Is this the default?
     * @type {boolean}
     * @memberof TributeBase
     */
    isDefault?: boolean;
    /**
     * Is this active?
     * @type {boolean}
     * @memberof TributeBase
     */
    isActive?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum TributeBaseTributeTypeEnum {
    InHonorOf = 'InHonorOf',
    InMemoryOf = 'InMemoryOf'
}


/**
 * Check if a given object implements the TributeBase interface.
 */
export function instanceOfTributeBase(value: object): value is TributeBase {
    return true;
}

export function TributeBaseFromJSON(json: any): TributeBase {
    return TributeBaseFromJSONTyped(json, false);
}

export function TributeBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TributeBase {
    if (json == null) {
        return json;
    }
    return {
        
        'note': json['Note'] == null ? undefined : json['Note'],
        'tributeType': json['TributeType'] == null ? undefined : json['TributeType'],
        'notificantAccountIds': json['NotificantAccountIds'] == null ? undefined : json['NotificantAccountIds'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'isDefault': json['IsDefault'] == null ? undefined : json['IsDefault'],
        'isActive': json['IsActive'] == null ? undefined : json['IsActive'],
    };
}

export function TributeBaseToJSON(json: any): TributeBase {
    return TributeBaseToJSONTyped(json, false);
}

export function TributeBaseToJSONTyped(value?: TributeBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Note': value['note'],
        'TributeType': value['tributeType'],
        'NotificantAccountIds': value['notificantAccountIds'],
        'Name': value['name'],
        'IsDefault': value['isDefault'],
        'IsActive': value['isActive'],
    };
}

export const TributeBasePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

