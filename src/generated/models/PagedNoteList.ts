/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PagedNoteListAllOfResults } from './PagedNoteListAllOfResults';
import {
    PagedNoteListAllOfResultsFromJSON,
    PagedNoteListAllOfResultsFromJSONTyped,
    PagedNoteListAllOfResultsToJSON,
    PagedNoteListAllOfResultsToJSONTyped,
} from './PagedNoteListAllOfResults';

/**
 * 
 * @export
 * @interface PagedNoteList
 */
export interface PagedNoteList {
    /**
     * The total number of records in Bloomerang.
     * @type {number}
     * @memberof PagedNoteList
     */
    total?: number;
    /**
     * The total number of records that match the filters.
     * @type {number}
     * @memberof PagedNoteList
     */
    totalFiltered?: number;
    /**
     * The 0-based index of the first record.
     * @type {number}
     * @memberof PagedNoteList
     */
    start?: number;
    /**
     * The number of records included in the result set.
     * @type {number}
     * @memberof PagedNoteList
     */
    resultCount?: number;
    /**
     * 
     * @type {Array<PagedNoteListAllOfResults>}
     * @memberof PagedNoteList
     */
    results?: Array<PagedNoteListAllOfResults>;
}

/**
 * Check if a given object implements the PagedNoteList interface.
 */
export function instanceOfPagedNoteList(value: object): value is PagedNoteList {
    return true;
}

export function PagedNoteListFromJSON(json: any): PagedNoteList {
    return PagedNoteListFromJSONTyped(json, false);
}

export function PagedNoteListFromJSONTyped(json: any, ignoreDiscriminator: boolean): PagedNoteList {
    if (json == null) {
        return json;
    }
    return {
        
        'total': json['Total'] == null ? undefined : json['Total'],
        'totalFiltered': json['TotalFiltered'] == null ? undefined : json['TotalFiltered'],
        'start': json['Start'] == null ? undefined : json['Start'],
        'resultCount': json['ResultCount'] == null ? undefined : json['ResultCount'],
        'results': json['Results'] == null ? undefined : ((json['Results'] as Array<any>).map(PagedNoteListAllOfResultsFromJSON)),
    };
}

export function PagedNoteListToJSON(json: any): PagedNoteList {
    return PagedNoteListToJSONTyped(json, false);
}

export function PagedNoteListToJSONTyped(value?: PagedNoteList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Total': value['total'],
        'TotalFiltered': value['totalFiltered'],
        'Start': value['start'],
        'ResultCount': value['resultCount'],
        'Results': value['results'] == null ? undefined : ((value['results'] as Array<any>).map(PagedNoteListAllOfResultsToJSON)),
    };
}

export const PagedNoteListPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

