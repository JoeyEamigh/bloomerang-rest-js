/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InteractionPostRequestAllOfAllOfAttachmentsInner } from './InteractionPostRequestAllOfAllOfAttachmentsInner';
import {
    InteractionPostRequestAllOfAllOfAttachmentsInnerFromJSON,
    InteractionPostRequestAllOfAllOfAttachmentsInnerFromJSONTyped,
    InteractionPostRequestAllOfAllOfAttachmentsInnerToJSON,
    InteractionPostRequestAllOfAllOfAttachmentsInnerToJSONTyped,
} from './InteractionPostRequestAllOfAllOfAttachmentsInner';

/**
 * 
 * @export
 * @interface TaskPostRequest
 */
export interface TaskPostRequest {
    /**
     * 
     * @type {Date}
     * @memberof TaskPostRequest
     */
    dueDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof TaskPostRequest
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskPostRequest
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskPostRequest
     */
    channel?: TaskPostRequestChannelEnum;
    /**
     * 
     * @type {string}
     * @memberof TaskPostRequest
     */
    purpose?: TaskPostRequestPurposeEnum;
    /**
     * The ID of the user assigned to this task
     * @type {number}
     * @memberof TaskPostRequest
     */
    userId?: number;
    /**
     * The ID of the constituent used in the API (not to be confused with accountNumber)
     * @type {number}
     * @memberof TaskPostRequest
     */
    accountId?: number;
    /**
     * 
     * @type {Array<InteractionPostRequestAllOfAllOfAttachmentsInner>}
     * @memberof TaskPostRequest
     */
    attachments?: Array<InteractionPostRequestAllOfAllOfAttachmentsInner>;
}

/**
* @export
* @enum {string}
*/
export enum TaskPostRequestChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
* @export
* @enum {string}
*/
export enum TaskPostRequestPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}


/**
 * Check if a given object implements the TaskPostRequest interface.
 */
export function instanceOfTaskPostRequest(value: object): value is TaskPostRequest {
    return true;
}

export function TaskPostRequestFromJSON(json: any): TaskPostRequest {
    return TaskPostRequestFromJSONTyped(json, false);
}

export function TaskPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'dueDate': json['DueDate'] == null ? undefined : (new Date(json['DueDate'])),
        'subject': json['Subject'] == null ? undefined : json['Subject'],
        'note': json['Note'] == null ? undefined : json['Note'],
        'channel': json['Channel'] == null ? undefined : json['Channel'],
        'purpose': json['Purpose'] == null ? undefined : json['Purpose'],
        'userId': json['UserId'] == null ? undefined : json['UserId'],
        'accountId': json['AccountId'] == null ? undefined : json['AccountId'],
        'attachments': json['Attachments'] == null ? undefined : ((json['Attachments'] as Array<any>).map(InteractionPostRequestAllOfAllOfAttachmentsInnerFromJSON)),
    };
}

export function TaskPostRequestToJSON(json: any): TaskPostRequest {
    return TaskPostRequestToJSONTyped(json, false);
}

export function TaskPostRequestToJSONTyped(value?: TaskPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'DueDate': value['dueDate'] == null ? undefined : ((value['dueDate']).toISOString().substring(0,10)),
        'Subject': value['subject'],
        'Note': value['note'],
        'Channel': value['channel'],
        'Purpose': value['purpose'],
        'UserId': value['userId'],
        'AccountId': value['accountId'],
        'Attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(InteractionPostRequestAllOfAllOfAttachmentsInnerToJSON)),
    };
}

export const TaskPostRequestPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

