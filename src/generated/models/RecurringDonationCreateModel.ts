/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecurringDonationCreateModelAllOfSoftCredits } from './RecurringDonationCreateModelAllOfSoftCredits';
import {
    RecurringDonationCreateModelAllOfSoftCreditsFromJSON,
    RecurringDonationCreateModelAllOfSoftCreditsFromJSONTyped,
    RecurringDonationCreateModelAllOfSoftCreditsToJSON,
    RecurringDonationCreateModelAllOfSoftCreditsToJSONTyped,
} from './RecurringDonationCreateModelAllOfSoftCredits';
import type { RecurringDonationCreateModelAllOfCustomValues } from './RecurringDonationCreateModelAllOfCustomValues';
import {
    RecurringDonationCreateModelAllOfCustomValuesFromJSON,
    RecurringDonationCreateModelAllOfCustomValuesFromJSONTyped,
    RecurringDonationCreateModelAllOfCustomValuesToJSON,
    RecurringDonationCreateModelAllOfCustomValuesToJSONTyped,
} from './RecurringDonationCreateModelAllOfCustomValues';
import type { RecurringDonationCreateModelAllOfAttachments } from './RecurringDonationCreateModelAllOfAttachments';
import {
    RecurringDonationCreateModelAllOfAttachmentsFromJSON,
    RecurringDonationCreateModelAllOfAttachmentsFromJSONTyped,
    RecurringDonationCreateModelAllOfAttachmentsToJSON,
    RecurringDonationCreateModelAllOfAttachmentsToJSONTyped,
} from './RecurringDonationCreateModelAllOfAttachments';

/**
 * 
 * @export
 * @interface RecurringDonationCreateModel
 */
export interface RecurringDonationCreateModel {
    /**
     * 
     * @type {Date}
     * @memberof RecurringDonationCreateModel
     */
    recurringDonationEndDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof RecurringDonationCreateModel
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof RecurringDonationCreateModel
     */
    acknowledgementStatus?: RecurringDonationCreateModelAcknowledgementStatusEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof RecurringDonationCreateModel
     */
    acknowledgementInteractionIds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof RecurringDonationCreateModel
     */
    recurringDonationFrequency: RecurringDonationCreateModelRecurringDonationFrequencyEnum;
    /**
     * Day1 & Day2 are only used with the TwiceMonthly frequency
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    recurringDonationDay1?: number;
    /**
     * Day1 & Day2 are only used with the TwiceMonthly frequency
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    recurringDonationDay2?: number;
    /**
     * 
     * @type {Date}
     * @memberof RecurringDonationCreateModel
     */
    recurringDonationStartDate: Date;
    /**
     * 
     * @type {string}
     * @memberof RecurringDonationCreateModel
     */
    type: RecurringDonationCreateModelTypeEnum;
    /**
     * The ID of the fund for this donation
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    fundId: number;
    /**
     * The ID of the quickbooks account for this donation
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    quickbooksAccountId?: number;
    /**
     * The ID of the campaign for this donation
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    campaignId?: number;
    /**
     * The ID of the appeal for this donation
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    appealId?: number;
    /**
     * The ID of the tribute for this donation
     * @type {number}
     * @memberof RecurringDonationCreateModel
     */
    tributeId?: number;
    /**
     * 
     * @type {Array<RecurringDonationCreateModelAllOfSoftCredits>}
     * @memberof RecurringDonationCreateModel
     */
    softCredits?: Array<RecurringDonationCreateModelAllOfSoftCredits>;
    /**
     * 
     * @type {Array<RecurringDonationCreateModelAllOfCustomValues>}
     * @memberof RecurringDonationCreateModel
     */
    customValues?: Array<RecurringDonationCreateModelAllOfCustomValues>;
    /**
     * 
     * @type {Array<RecurringDonationCreateModelAllOfAttachments>}
     * @memberof RecurringDonationCreateModel
     */
    attachments?: Array<RecurringDonationCreateModelAllOfAttachments>;
}

/**
* @export
* @enum {string}
*/
export enum RecurringDonationCreateModelAcknowledgementStatusEnum {
    Yes = 'Yes',
    No = 'No',
    DoNotAcknowledge = 'DoNotAcknowledge'
}
/**
* @export
* @enum {string}
*/
export enum RecurringDonationCreateModelRecurringDonationFrequencyEnum {
    Weekly = 'Weekly',
    EveryOtherWeekly = 'EveryOtherWeekly',
    TwiceMonthly = 'TwiceMonthly',
    Monthly = 'Monthly',
    EveryOtherMonthly = 'EveryOtherMonthly',
    Quarterly = 'Quarterly',
    Yearly = 'Yearly'
}
/**
* @export
* @enum {string}
*/
export enum RecurringDonationCreateModelTypeEnum {
    RecurringDonation = 'RecurringDonation'
}


/**
 * Check if a given object implements the RecurringDonationCreateModel interface.
 */
export function instanceOfRecurringDonationCreateModel(value: object): value is RecurringDonationCreateModel {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('recurringDonationFrequency' in value) || value['recurringDonationFrequency'] === undefined) return false;
    if (!('recurringDonationStartDate' in value) || value['recurringDonationStartDate'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('fundId' in value) || value['fundId'] === undefined) return false;
    return true;
}

export function RecurringDonationCreateModelFromJSON(json: any): RecurringDonationCreateModel {
    return RecurringDonationCreateModelFromJSONTyped(json, false);
}

export function RecurringDonationCreateModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurringDonationCreateModel {
    if (json == null) {
        return json;
    }
    return {
        
        'recurringDonationEndDate': json['RecurringDonationEndDate'] == null ? undefined : (new Date(json['RecurringDonationEndDate'])),
        'amount': json['Amount'],
        'note': json['Note'] == null ? undefined : json['Note'],
        'acknowledgementStatus': json['AcknowledgementStatus'] == null ? undefined : json['AcknowledgementStatus'],
        'acknowledgementInteractionIds': json['AcknowledgementInteractionIds'] == null ? undefined : json['AcknowledgementInteractionIds'],
        'recurringDonationFrequency': json['RecurringDonationFrequency'],
        'recurringDonationDay1': json['RecurringDonationDay1'] == null ? undefined : json['RecurringDonationDay1'],
        'recurringDonationDay2': json['RecurringDonationDay2'] == null ? undefined : json['RecurringDonationDay2'],
        'recurringDonationStartDate': (new Date(json['RecurringDonationStartDate'])),
        'type': json['Type'],
        'fundId': json['FundId'],
        'quickbooksAccountId': json['QuickbooksAccountId'] == null ? undefined : json['QuickbooksAccountId'],
        'campaignId': json['CampaignId'] == null ? undefined : json['CampaignId'],
        'appealId': json['AppealId'] == null ? undefined : json['AppealId'],
        'tributeId': json['TributeId'] == null ? undefined : json['TributeId'],
        'softCredits': json['SoftCredits'] == null ? undefined : ((json['SoftCredits'] as Array<any>).map(RecurringDonationCreateModelAllOfSoftCreditsFromJSON)),
        'customValues': json['CustomValues'] == null ? undefined : ((json['CustomValues'] as Array<any>).map(RecurringDonationCreateModelAllOfCustomValuesFromJSON)),
        'attachments': json['Attachments'] == null ? undefined : ((json['Attachments'] as Array<any>).map(RecurringDonationCreateModelAllOfAttachmentsFromJSON)),
    };
}

export function RecurringDonationCreateModelToJSON(json: any): RecurringDonationCreateModel {
    return RecurringDonationCreateModelToJSONTyped(json, false);
}

export function RecurringDonationCreateModelToJSONTyped(value?: RecurringDonationCreateModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'RecurringDonationEndDate': value['recurringDonationEndDate'] == null ? undefined : ((value['recurringDonationEndDate']).toISOString().substring(0,10)),
        'Amount': value['amount'],
        'Note': value['note'],
        'AcknowledgementStatus': value['acknowledgementStatus'],
        'AcknowledgementInteractionIds': value['acknowledgementInteractionIds'],
        'RecurringDonationFrequency': value['recurringDonationFrequency'],
        'RecurringDonationDay1': value['recurringDonationDay1'],
        'RecurringDonationDay2': value['recurringDonationDay2'],
        'RecurringDonationStartDate': ((value['recurringDonationStartDate']).toISOString().substring(0,10)),
        'Type': value['type'],
        'FundId': value['fundId'],
        'QuickbooksAccountId': value['quickbooksAccountId'],
        'CampaignId': value['campaignId'],
        'AppealId': value['appealId'],
        'TributeId': value['tributeId'],
        'SoftCredits': value['softCredits'] == null ? undefined : ((value['softCredits'] as Array<any>).map(RecurringDonationCreateModelAllOfSoftCreditsToJSON)),
        'CustomValues': value['customValues'] == null ? undefined : ((value['customValues'] as Array<any>).map(RecurringDonationCreateModelAllOfCustomValuesToJSON)),
        'Attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(RecurringDonationCreateModelAllOfAttachmentsToJSON)),
    };
}

export const RecurringDonationCreateModelPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
    recurringDonationDay1: {
        maximum: 31,
        exclusiveMaximum: false,
        minimum: 1,
        exclusiveMinimum: false,
    },
    recurringDonationDay2: {
        maximum: 31,
        exclusiveMaximum: false,
        minimum: 1,
        exclusiveMinimum: false,
    },
}

