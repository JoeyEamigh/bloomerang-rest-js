/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InteractionBase
 */
export interface InteractionBase {
    /**
     * 
     * @type {Date}
     * @memberof InteractionBase
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof InteractionBase
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof InteractionBase
     */
    channel?: InteractionBaseChannelEnum;
    /**
     * 
     * @type {string}
     * @memberof InteractionBase
     */
    purpose?: InteractionBasePurposeEnum;
    /**
     * 
     * @type {string}
     * @memberof InteractionBase
     */
    subject?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InteractionBase
     */
    isInbound?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum InteractionBaseChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
* @export
* @enum {string}
*/
export enum InteractionBasePurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}


/**
 * Check if a given object implements the InteractionBase interface.
 */
export function instanceOfInteractionBase(value: object): value is InteractionBase {
    return true;
}

export function InteractionBaseFromJSON(json: any): InteractionBase {
    return InteractionBaseFromJSONTyped(json, false);
}

export function InteractionBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): InteractionBase {
    if (json == null) {
        return json;
    }
    return {
        
        'date': json['Date'] == null ? undefined : (new Date(json['Date'])),
        'note': json['Note'] == null ? undefined : json['Note'],
        'channel': json['Channel'] == null ? undefined : json['Channel'],
        'purpose': json['Purpose'] == null ? undefined : json['Purpose'],
        'subject': json['Subject'] == null ? undefined : json['Subject'],
        'isInbound': json['IsInbound'] == null ? undefined : json['IsInbound'],
    };
}

export function InteractionBaseToJSON(json: any): InteractionBase {
    return InteractionBaseToJSONTyped(json, false);
}

export function InteractionBaseToJSONTyped(value?: InteractionBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'Note': value['note'],
        'Channel': value['channel'],
        'Purpose': value['purpose'],
        'Subject': value['subject'],
        'IsInbound': value['isInbound'],
    };
}

export const InteractionBasePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

