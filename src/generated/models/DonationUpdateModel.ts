/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DonationUpdateModelAllOfCustomValues } from './DonationUpdateModelAllOfCustomValues';
import {
    DonationUpdateModelAllOfCustomValuesFromJSON,
    DonationUpdateModelAllOfCustomValuesFromJSONTyped,
    DonationUpdateModelAllOfCustomValuesToJSON,
    DonationUpdateModelAllOfCustomValuesToJSONTyped,
} from './DonationUpdateModelAllOfCustomValues';
import type { DonationUpdateModelAllOfSoftCredits } from './DonationUpdateModelAllOfSoftCredits';
import {
    DonationUpdateModelAllOfSoftCreditsFromJSON,
    DonationUpdateModelAllOfSoftCreditsFromJSONTyped,
    DonationUpdateModelAllOfSoftCreditsToJSON,
    DonationUpdateModelAllOfSoftCreditsToJSONTyped,
} from './DonationUpdateModelAllOfSoftCredits';
import type { DonationUpdateModelAllOfAttachments } from './DonationUpdateModelAllOfAttachments';
import {
    DonationUpdateModelAllOfAttachmentsFromJSON,
    DonationUpdateModelAllOfAttachmentsFromJSONTyped,
    DonationUpdateModelAllOfAttachmentsToJSON,
    DonationUpdateModelAllOfAttachmentsToJSONTyped,
} from './DonationUpdateModelAllOfAttachments';

/**
 * 
 * @export
 * @interface DonationUpdateModel
 */
export interface DonationUpdateModel {
    /**
     * The ID of the designation used in the API (not to be confused with DesignationNumber)
     * @type {number}
     * @memberof DonationUpdateModel
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof DonationUpdateModel
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof DonationUpdateModel
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof DonationUpdateModel
     */
    acknowledgementStatus?: DonationUpdateModelAcknowledgementStatusEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof DonationUpdateModel
     */
    acknowledgementInteractionIds?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DonationUpdateModel
     */
    nonDeductibleAmount?: number;
    /**
     * The ID of the fund for this donation
     * @type {number}
     * @memberof DonationUpdateModel
     */
    fundId?: number;
    /**
     * The ID of the quickbooks account for this donation
     * @type {number}
     * @memberof DonationUpdateModel
     */
    quickbooksAccountId?: number;
    /**
     * The ID of the campaign for this donation
     * @type {number}
     * @memberof DonationUpdateModel
     */
    campaignId?: number;
    /**
     * The ID of the appeal for this donation
     * @type {number}
     * @memberof DonationUpdateModel
     */
    appealId?: number;
    /**
     * The ID of the tribute for this donation
     * @type {number}
     * @memberof DonationUpdateModel
     */
    tributeId?: number;
    /**
     * 
     * @type {Array<DonationUpdateModelAllOfSoftCredits>}
     * @memberof DonationUpdateModel
     */
    softCredits?: Array<DonationUpdateModelAllOfSoftCredits>;
    /**
     * 
     * @type {Array<DonationUpdateModelAllOfCustomValues>}
     * @memberof DonationUpdateModel
     */
    customValues?: Array<DonationUpdateModelAllOfCustomValues>;
    /**
     * 
     * @type {Array<DonationUpdateModelAllOfAttachments>}
     * @memberof DonationUpdateModel
     */
    attachments?: Array<DonationUpdateModelAllOfAttachments>;
}

/**
* @export
* @enum {string}
*/
export enum DonationUpdateModelAcknowledgementStatusEnum {
    Yes = 'Yes',
    No = 'No',
    DoNotAcknowledge = 'DoNotAcknowledge'
}


/**
 * Check if a given object implements the DonationUpdateModel interface.
 */
export function instanceOfDonationUpdateModel(value: object): value is DonationUpdateModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function DonationUpdateModelFromJSON(json: any): DonationUpdateModel {
    return DonationUpdateModelFromJSONTyped(json, false);
}

export function DonationUpdateModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DonationUpdateModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'amount': json['Amount'] == null ? undefined : json['Amount'],
        'note': json['Note'] == null ? undefined : json['Note'],
        'acknowledgementStatus': json['AcknowledgementStatus'] == null ? undefined : json['AcknowledgementStatus'],
        'acknowledgementInteractionIds': json['AcknowledgementInteractionIds'] == null ? undefined : json['AcknowledgementInteractionIds'],
        'nonDeductibleAmount': json['NonDeductibleAmount'] == null ? undefined : json['NonDeductibleAmount'],
        'fundId': json['FundId'] == null ? undefined : json['FundId'],
        'quickbooksAccountId': json['QuickbooksAccountId'] == null ? undefined : json['QuickbooksAccountId'],
        'campaignId': json['CampaignId'] == null ? undefined : json['CampaignId'],
        'appealId': json['AppealId'] == null ? undefined : json['AppealId'],
        'tributeId': json['TributeId'] == null ? undefined : json['TributeId'],
        'softCredits': json['SoftCredits'] == null ? undefined : ((json['SoftCredits'] as Array<any>).map(DonationUpdateModelAllOfSoftCreditsFromJSON)),
        'customValues': json['CustomValues'] == null ? undefined : ((json['CustomValues'] as Array<any>).map(DonationUpdateModelAllOfCustomValuesFromJSON)),
        'attachments': json['Attachments'] == null ? undefined : ((json['Attachments'] as Array<any>).map(DonationUpdateModelAllOfAttachmentsFromJSON)),
    };
}

export function DonationUpdateModelToJSON(json: any): DonationUpdateModel {
    return DonationUpdateModelToJSONTyped(json, false);
}

export function DonationUpdateModelToJSONTyped(value?: DonationUpdateModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Amount': value['amount'],
        'Note': value['note'],
        'AcknowledgementStatus': value['acknowledgementStatus'],
        'AcknowledgementInteractionIds': value['acknowledgementInteractionIds'],
        'NonDeductibleAmount': value['nonDeductibleAmount'],
        'FundId': value['fundId'],
        'QuickbooksAccountId': value['quickbooksAccountId'],
        'CampaignId': value['campaignId'],
        'AppealId': value['appealId'],
        'TributeId': value['tributeId'],
        'SoftCredits': value['softCredits'] == null ? undefined : ((value['softCredits'] as Array<any>).map(DonationUpdateModelAllOfSoftCreditsToJSON)),
        'CustomValues': value['customValues'] == null ? undefined : ((value['customValues'] as Array<any>).map(DonationUpdateModelAllOfCustomValuesToJSON)),
        'Attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(DonationUpdateModelAllOfAttachmentsToJSON)),
    };
}

export const DonationUpdateModelPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

