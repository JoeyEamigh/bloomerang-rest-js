/* tslint:disable */
/* eslint-disable */
/**
 * Bloomerang API
 * Private-key API for Bloomerang CRM
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@bloomerang.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInner } from './ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInner';
import {
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerFromJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerFromJSONTyped,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerToJSON,
    ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerToJSONTyped,
} from './ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInner';
import type { CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrail } from './CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrail';
import {
    CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailFromJSON,
    CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailFromJSONTyped,
    CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailToJSON,
    CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailToJSONTyped,
} from './CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrail';

/**
 * 
 * @export
 * @interface PagedInteractionListAllOfResults
 */
export interface PagedInteractionListAllOfResults {
    /**
     * 
     * @type {number}
     * @memberof PagedInteractionListAllOfResults
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PagedInteractionListAllOfResults
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    channel?: PagedInteractionListAllOfResultsChannelEnum;
    /**
     * 
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    purpose?: PagedInteractionListAllOfResultsPurposeEnum;
    /**
     * 
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    subject?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PagedInteractionListAllOfResults
     */
    isInbound?: boolean;
    /**
     * The ID of the constituent used in the API (not to be confused with accountNumber)
     * @type {number}
     * @memberof PagedInteractionListAllOfResults
     */
    accountId?: number;
    /**
     * If the Channel is Twitter, this contains the ID of the tweet that can be used to display the tweet by substituting into https://twitter.com/anyUser/status/{TweetId}
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    tweetId?: string;
    /**
     * Whether or not this interaction was created by an email that was sent to Bloomerang via BCC
     * @type {boolean}
     * @memberof PagedInteractionListAllOfResults
     */
    isBcc?: boolean;
    /**
     * If the interaction is an email interaction, this is the email address of the constituent that received the email. Only populated when IsBcc is true.
     * @type {string}
     * @memberof PagedInteractionListAllOfResults
     */
    emailAddress?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PagedInteractionListAllOfResults
     */
    attachmentIds?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PagedInteractionListAllOfResults
     */
    letterAttachmentIds?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PagedInteractionListAllOfResults
     */
    surveyLapsedResponses?: Array<string>;
    /**
     * Whether this interaction represents a donor survey response
     * @type {boolean}
     * @memberof PagedInteractionListAllOfResults
     */
    isEngagementSurveyResponse?: boolean;
    /**
     * The interaction ID of the survey email that was sent to the donor.  Only populated when IsEngagementSurveyResponse is true
     * @type {number}
     * @memberof PagedInteractionListAllOfResults
     */
    surveyEmailInteractionId?: number;
    /**
     * Whether this interaction represents a survey email that was sent to the donor
     * @type {boolean}
     * @memberof PagedInteractionListAllOfResults
     */
    isEngagementSurveyEmail?: boolean;
    /**
     * The interaction ID of the survey response.  Only populated when IsEngagementSurveyEmail is true.
     * @type {number}
     * @memberof PagedInteractionListAllOfResults
     */
    surveyResponseInteractionId?: number;
    /**
     * 
     * @type {Array<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInner>}
     * @memberof PagedInteractionListAllOfResults
     */
    customValues?: Array<ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInner>;
    /**
     * 
     * @type {CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrail}
     * @memberof PagedInteractionListAllOfResults
     */
    auditTrail?: CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrail;
}

/**
* @export
* @enum {string}
*/
export enum PagedInteractionListAllOfResultsChannelEnum {
    Email = 'Email',
    MassEmail = 'MassEmail',
    Phone = 'Phone',
    TextMessage = 'TextMessage',
    Mail = 'Mail',
    InPerson = 'InPerson',
    SocialMedia = 'SocialMedia',
    Website = 'Website',
    Twitter = 'Twitter',
    Other = 'Other',
    EngagementSurveyEmail = 'EngagementSurveyEmail',
    EngagementSurvey = 'EngagementSurvey'
}
/**
* @export
* @enum {string}
*/
export enum PagedInteractionListAllOfResultsPurposeEnum {
    Acknowledgement = 'Acknowledgement',
    ImpactCultivation = 'ImpactCultivation',
    Newsletter = 'Newsletter',
    Receipt = 'Receipt',
    Solicitation = 'Solicitation',
    SpecialEvent = 'SpecialEvent',
    VolunteerActivity = 'VolunteerActivity',
    PledgeReminder = 'PledgeReminder',
    Welcome = 'Welcome',
    BenevonPointOfEntry = 'BenevonPointOfEntry',
    BenevonFollowUp = 'BenevonFollowUp',
    BenevonAskEvent = 'BenevonAskEvent',
    BenevonOneOnOneAsk = 'BenevonOneOnOneAsk',
    BenevonOngoingCultivation = 'BenevonOngoingCultivation',
    Other = 'Other'
}


/**
 * Check if a given object implements the PagedInteractionListAllOfResults interface.
 */
export function instanceOfPagedInteractionListAllOfResults(value: object): value is PagedInteractionListAllOfResults {
    return true;
}

export function PagedInteractionListAllOfResultsFromJSON(json: any): PagedInteractionListAllOfResults {
    return PagedInteractionListAllOfResultsFromJSONTyped(json, false);
}

export function PagedInteractionListAllOfResultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PagedInteractionListAllOfResults {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'] == null ? undefined : json['Id'],
        'date': json['Date'] == null ? undefined : (new Date(json['Date'])),
        'note': json['Note'] == null ? undefined : json['Note'],
        'channel': json['Channel'] == null ? undefined : json['Channel'],
        'purpose': json['Purpose'] == null ? undefined : json['Purpose'],
        'subject': json['Subject'] == null ? undefined : json['Subject'],
        'isInbound': json['IsInbound'] == null ? undefined : json['IsInbound'],
        'accountId': json['AccountId'] == null ? undefined : json['AccountId'],
        'tweetId': json['TweetId'] == null ? undefined : json['TweetId'],
        'isBcc': json['IsBcc'] == null ? undefined : json['IsBcc'],
        'emailAddress': json['EmailAddress'] == null ? undefined : json['EmailAddress'],
        'attachmentIds': json['AttachmentIds'] == null ? undefined : json['AttachmentIds'],
        'letterAttachmentIds': json['LetterAttachmentIds'] == null ? undefined : json['LetterAttachmentIds'],
        'surveyLapsedResponses': json['SurveyLapsedResponses'] == null ? undefined : json['SurveyLapsedResponses'],
        'isEngagementSurveyResponse': json['IsEngagementSurveyResponse'] == null ? undefined : json['IsEngagementSurveyResponse'],
        'surveyEmailInteractionId': json['SurveyEmailInteractionId'] == null ? undefined : json['SurveyEmailInteractionId'],
        'isEngagementSurveyEmail': json['IsEngagementSurveyEmail'] == null ? undefined : json['IsEngagementSurveyEmail'],
        'surveyResponseInteractionId': json['SurveyResponseInteractionId'] == null ? undefined : json['SurveyResponseInteractionId'],
        'customValues': json['CustomValues'] == null ? undefined : ((json['CustomValues'] as Array<any>).map(ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerFromJSON)),
        'auditTrail': json['AuditTrail'] == null ? undefined : CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailFromJSON(json['AuditTrail']),
    };
}

export function PagedInteractionListAllOfResultsToJSON(json: any): PagedInteractionListAllOfResults {
    return PagedInteractionListAllOfResultsToJSONTyped(json, false);
}

export function PagedInteractionListAllOfResultsToJSONTyped(value?: PagedInteractionListAllOfResults | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'Note': value['note'],
        'Channel': value['channel'],
        'Purpose': value['purpose'],
        'Subject': value['subject'],
        'IsInbound': value['isInbound'],
        'AccountId': value['accountId'],
        'TweetId': value['tweetId'],
        'IsBcc': value['isBcc'],
        'EmailAddress': value['emailAddress'],
        'AttachmentIds': value['attachmentIds'],
        'LetterAttachmentIds': value['letterAttachmentIds'],
        'SurveyLapsedResponses': value['surveyLapsedResponses'],
        'IsEngagementSurveyResponse': value['isEngagementSurveyResponse'],
        'SurveyEmailInteractionId': value['surveyEmailInteractionId'],
        'IsEngagementSurveyEmail': value['isEngagementSurveyEmail'],
        'SurveyResponseInteractionId': value['surveyResponseInteractionId'],
        'CustomValues': value['customValues'] == null ? undefined : ((value['customValues'] as Array<any>).map(ConstituentsGet200ResponseAllOfResultsInnerAllOfAllOfCustomValuesInnerToJSON)),
        'AuditTrail': CampaignsGet200ResponseAllOfResultsInnerAllOfAuditTrailToJSON(value['auditTrail']),
    };
}

export const PagedInteractionListAllOfResultsPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

